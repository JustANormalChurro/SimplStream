src/components/AboutView.tsx:
import { ArrowLeft, User, Heart, Tv, Star, Clock, Shield, Globe, Sparkles, XCircle } from 'lucide-react';
import { useTheme } from '../context/ThemeContext';


interface AboutViewProps {
  onBack: () => void;
}


export function AboutView({ onBack }: AboutViewProps) {
  const { effectiveTheme } = useTheme();


  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';
  const cardClass = effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white border border-gray-200';


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <div className={`fixed top-0 left-0 right-0 z-50 ${effectiveTheme === 'dark' ? 'bg-gradient-to-b from-black via-black/95 to-transparent' : 'bg-gradient-to-b from-white via-white/95 to-transparent'}`}>
        <div className="max-w-7xl mx-auto px-6 py-4">
          <button
            onClick={onBack}
            className={`flex items-center gap-2 ${textClass} hover:text-blue-400 transition-colors`}
          >
            <ArrowLeft size={24} />
            <span className="font-medium">Back</span>
          </button>
        </div>
      </div>


      <div className="pt-24 px-6 pb-20">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h1 className={`text-5xl font-bold mb-4 ${textClass}`}>
              About <span className="text-blue-500">Simpl</span>Stream
            </h1>
            <p className={`text-xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
              Where streaming meets simplicity, customization, and value 🎬
            </p>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-8 shadow-lg`}>
            <p className={`text-lg leading-relaxed ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
              Welcome to SimplStream—where streaming meets simplicity, customization, and value. Built for today's viewers, SimplStream brings you all your favorite movies, TV shows, and live channels with a modern, intuitive experience. ✨
            </p>
          </div>


          <h2 className={`text-3xl font-bold mb-6 ${textClass}`}>Key Features 🚀</h2>


          <div className="grid md:grid-cols-2 gap-6 mb-12">
            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-blue-500 p-3 rounded-lg">
                  <User size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Profile & Account Creation</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Personalize your watching journey by creating your own profile. Save preferences, set up avatars, adjust your settings, and access your favorite content on any device—just like Netflix. 👤
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-green-500 p-3 rounded-lg">
                  <Heart size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Completely Free, Minimal Ads</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Enjoy unlimited streaming without monthly costs. The platform is 100% free to users, with only minimal ads directly controlled to avoid interruptions and enhance viewing comfort. 💰
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-purple-500 p-3 rounded-lg">
                  <Star size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Amazing User Interface</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Discover a sleek, easy-to-use design built for clarity and smooth navigation. Access everything in seconds—from categories and recommendations to trending content—via a beautiful, modern interface. 🎨
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-red-500 p-3 rounded-lg">
                  <Tv size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Live TV Channels</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Access real-time broadcasts, news, and events from supported providers. Never miss out on your favorite shows, sports, or breaking updates. 📺
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-yellow-500 p-3 rounded-lg">
                  <Clock size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Watchlist & Watch History</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Add movies, series, and episodes to your custom watchlist to revisit later. Instantly resume content anywhere with a fully tracked watch history. ⏱️
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-indigo-500 p-3 rounded-lg">
                  <Globe size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Multiple Server Integration</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Stream from top sources like VidSRC, Vidlink Pro, 111Movies, Videasy, and Vidfast for a vast selection and reliable uptime. 🌐
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-pink-500 p-3 rounded-lg">
                  <Shield size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>No Account Required</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    For those who prefer to stream anonymously, enjoy the majority of SimplStream's library and live options without signing up. 🔒
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-teal-500 p-3 rounded-lg">
                  <Globe size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Universal Accessibility</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Watch anywhere, anytime—on desktop, tablet, or mobile devices. SimplStream runs on modern browsers and is optimized for fast load times and smooth playback. 📱
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-orange-500 p-3 rounded-lg">
                  <Sparkles size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Surprise Me Feature</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Can't decide what to watch? Let our intelligent recommendation system surprise you with personalized content based on your viewing history and preferences. Discover hidden gems tailored just for you! 🎲
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-rose-500 p-3 rounded-lg">
                  <XCircle size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>Ad-Free Option</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Want an uninterrupted experience? Simply toggle "Remove Ads" in your profile settings to enjoy SimplStream completely ad-free. No subscriptions required—just pure, seamless streaming! 🚫
                  </p>
                </div>
              </div>
            </div>


            <div className={`${cardClass} rounded-lg p-6 shadow-lg`}>
              <div className="flex items-start gap-4">
                <div className="bg-cyan-500 p-3 rounded-lg">
                  <Tv size={24} className="text-white" />
                </div>
                <div>
                  <h3 className={`text-xl font-bold mb-2 ${textClass}`}>4K TV Optimized</h3>
                  <p className={effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}>
                    Experience SimplStream on the big screen! Our interface is fully optimized for 4K televisions (3840x2160), providing stunning visuals and easy navigation from your couch. Perfect for the ultimate home theater experience! 📺
                  </p>
                </div>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-8 shadow-lg`}>
            <h2 className={`text-3xl font-bold mb-4 ${textClass}`}>Why Choose SimplStream? 💡</h2>
            <p className={`text-lg leading-relaxed mb-4 ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
              SimplStream puts you in control. It combines the best of personalized streaming with true freedom:
            </p>
            <ul className={`space-y-2 text-lg ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
              <li>✅ No subscriptions</li>
              <li>✅ No invasive ads</li>
              <li>✅ No complicated menus</li>
              <li>✅ Just straightforward access to media you love</li>
            </ul>
            <p className={`text-lg leading-relaxed mt-4 ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
              Our mission is to make streaming easy, enjoyable, and accessible for everyone. Whether you're a movie buff, binge-watcher, or casual viewer, SimplStream is your home for entertainment. 🎉
            </p>
          </div>


          <div className={`${cardClass} rounded-lg p-8 text-center shadow-lg`}>
            <h2 className={`text-3xl font-bold mb-4 ${textClass}`}>Need Help? 📧</h2>
            <p className={`text-lg mb-4 ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
              Our support team is ready to assist you. Contact us anytime at:
            </p>
            <a
              href="mailto:admin.simplstream@protonmail.com"
              className="text-blue-500 hover:text-blue-600 text-xl font-semibold"
            >
              admin.simplstream@protonmail.com
            </a>
          </div>


          <div className="text-center mt-12">
            <p className={`text-2xl font-bold ${textClass}`}>
              Explore SimplStream—where entertainment is truly simple and free. 🌟
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}


BannerAd.tsx:
import { X, Heart, Sparkles, Gift } from 'lucide-react';


interface BannerAdProps {
  onClose: () => void;
  onDonate: () => void;
  theme: 'light' | 'dark';
}


export function BannerAd({ onClose, onDonate, theme }: BannerAdProps) {
  return (
    <div className={`fixed top-20 4k:top-40 left-0 right-0 z-40 ${theme === 'dark' ? 'bg-gradient-to-r from-purple-600 to-blue-600' : 'bg-gradient-to-r from-purple-500 to-blue-500'} text-white shadow-2xl animate-slide-down`}>
      <div className="4k:max-w-none max-w-7xl mx-auto px-4 4k:px-12 py-3 4k:py-6 flex items-center justify-between gap-4 4k:gap-8">
        <div className="flex items-center gap-3 4k:gap-6 flex-1">
          <Heart className="animate-pulse 4k:w-12 4k:h-12" size={24} />
          <p className="text-sm md:text-base 4k:text-3xl font-semibold">
            <Sparkles className="inline 4k:w-10 4k:h-10" size={16} /> Enjoying SimplStream? Support the developer and help keep it FREE! <Gift className="inline 4k:w-10 4k:h-10" size={16} />
          </p>
        </div>
        <div className="flex items-center gap-2 4k:gap-4">
          <button
            onClick={onDonate}
            className="px-4 py-2 4k:px-8 4k:py-4 bg-white text-purple-600 hover:bg-gray-100 rounded-lg 4k:rounded-2xl font-bold text-sm 4k:text-2xl transition-all whitespace-nowrap"
          >
            Donate Now
          </button>
          <button
            onClick={onClose}
            className="p-2 4k:p-4 hover:bg-white/20 rounded-full transition-colors"
          >
            <X size={20} className="4k:w-10 4k:h-10" />
          </button>
        </div>
      </div>
      <style>{`
        @keyframes slide-down {
          from {
            transform: translateY(-100%);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        .animate-slide-down {
          animation: slide-down 0.5s ease-out forwards;
        }
      `}</style>
    </div>
  );
}


CastMemberModal.tsx:
import { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { CastMember } from '../types';
import { tmdbFetch, getTMDBImageUrl } from '../lib/tmdb';


interface CastMemberModalProps {
  castMember: CastMember;
  onClose: () => void;
}


interface PersonDetail {
  id: number;
  name: string;
  biography: string;
  birthday: string | null;
  place_of_birth: string | null;
  profile_path: string | null;
  known_for_department: string;
  also_known_as: string[];
  combined_credits?: {
    cast: Array<{
      id: number;
      title?: string;
      name?: string;
      poster_path: string | null;
      release_date?: string;
      first_air_date?: string;
      media_type: 'movie' | 'tv';
    }>;
  };
}


export function CastMemberModal({ castMember, onClose }: CastMemberModalProps) {
  const [personDetail, setPersonDetail] = useState<PersonDetail | null>(null);
  const [loading, setLoading] = useState(true);


  useEffect(() => {
    loadPersonDetail();
  }, [castMember.id]);


  async function loadPersonDetail() {
    try {
      const data = await tmdbFetch(`/person/${castMember.id}?append_to_response=combined_credits`);
      setPersonDetail(data);
    } catch (error) {
      console.error('Error loading person detail:', error);
    } finally {
      setLoading(false);
    }
  }


  const calculateAge = (birthday: string | null) => {
    if (!birthday) return null;
    const birthDate = new Date(birthday);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  };


  return (
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/80 backdrop-blur-sm p-4">
      <div className="bg-gray-900 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-gray-900 border-b border-gray-800 p-6 flex justify-between items-center z-10">
          <h2 className="text-3xl font-bold text-white">{castMember.name}</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors p-2 hover:bg-gray-800 rounded-full"
          >
            <X size={24} />
          </button>
        </div>


        {loading ? (
          <div className="p-12 flex items-center justify-center">
            <div className="text-white text-xl">Loading...</div>
          </div>
        ) : personDetail ? (
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="md:col-span-1">
                <img
                  src={getTMDBImageUrl(personDetail.profile_path, 'w500')}
                  alt={personDetail.name}
                  className="w-full rounded-lg shadow-2xl"
                  onError={(e) => {
                    e.currentTarget.src = 'https://via.placeholder.com/500x750?text=No+Image';
                  }}
                />
                <div className="mt-4 space-y-3">
                  <div>
                    <h4 className="text-gray-400 text-sm font-medium mb-1">Known For</h4>
                    <p className="text-white">{personDetail.known_for_department}</p>
                  </div>
                  {personDetail.birthday && (
                    <div>
                      <h4 className="text-gray-400 text-sm font-medium mb-1">Age</h4>
                      <p className="text-white">
                        {calculateAge(personDetail.birthday)} years old
                        <span className="text-gray-400 text-sm ml-2">
                          ({new Date(personDetail.birthday).toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })})
                        </span>
                      </p>
                    </div>
                  )}
                  {personDetail.place_of_birth && (
                    <div>
                      <h4 className="text-gray-400 text-sm font-medium mb-1">Place of Birth</h4>
                      <p className="text-white">{personDetail.place_of_birth}</p>
                    </div>
                  )}
                  {personDetail.also_known_as && personDetail.also_known_as.length > 0 && (
                    <div>
                      <h4 className="text-gray-400 text-sm font-medium mb-1">Also Known As</h4>
                      <div className="space-y-1">
                        {personDetail.also_known_as.slice(0, 5).map((name, index) => (
                          <p key={index} className="text-white text-sm">{name}</p>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>


              <div className="md:col-span-2 space-y-6">
                {personDetail.biography && (
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-3">Biography</h3>
                    <p className="text-gray-300 leading-relaxed whitespace-pre-line">
                      {personDetail.biography}
                    </p>
                  </div>
                )}


                {personDetail.combined_credits && personDetail.combined_credits.cast.length > 0 && (
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-4">Known For</h3>
                    <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
                      {personDetail.combined_credits.cast
                        .sort((a, b) => {
                          const dateA = a.release_date || a.first_air_date || '0';
                          const dateB = b.release_date || b.first_air_date || '0';
                          return dateB.localeCompare(dateA);
                        })
                        .slice(0, 12)
                        .map((credit) => (
                          <div key={credit.id} className="group cursor-pointer">
                            <div className="rounded-lg overflow-hidden transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl">
                              <img
                                src={getTMDBImageUrl(credit.poster_path, 'w342')}
                                alt={credit.title || credit.name}
                                className="w-full h-48 object-cover"
                                onError={(e) => {
                                  e.currentTarget.src = 'https://via.placeholder.com/342x513?text=No+Poster';
                                }}
                              />
                            </div>
                            <div className="mt-2">
                              <p className="text-white text-sm font-medium line-clamp-2">
                                {credit.title || credit.name}
                              </p>
                              <p className="text-gray-400 text-xs">
                                {(credit.release_date || credit.first_air_date || '').slice(0, 4)}
                              </p>
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="p-12 text-center">
            <p className="text-gray-400 text-lg">Failed to load cast member details</p>
          </div>
        )}
      </div>
    </div>
  );
}


ConfirmDeleteModal.tsx:
interface ConfirmDeleteModalProps {
  onConfirm: () => void;
  onCancel: () => void;
  theme: 'light' | 'dark';
  title: string;
}


export function ConfirmDeleteModal({ onConfirm, onCancel, theme, title }: ConfirmDeleteModalProps) {
  return (
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/80 p-4 4k:p-8">
      <div
        className={`${theme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-2xl 4k:rounded-[3rem] p-8 4k:p-16 max-w-md 4k:max-w-4xl w-full shadow-2xl relative`}
        style={{
          boxShadow: theme === 'dark'
            ? '0 0 60px rgba(59, 130, 246, 0.4), 0 0 30px rgba(59, 130, 246, 0.3)'
            : '0 0 60px rgba(59, 130, 246, 0.5), 0 0 30px rgba(59, 130, 246, 0.4)',
        }}
      >
        <h2 className={`text-2xl 4k:text-6xl font-bold mb-4 4k:mb-8 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
          Confirm Delete
        </h2>
        <p className={`mb-8 4k:mb-16 text-lg 4k:text-4xl ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
          Are you sure you want to delete "{title}"?
        </p>
        <div className="flex gap-4 4k:gap-8">
          <button
            onClick={onConfirm}
            className="flex-1 px-6 py-3 4k:px-12 4k:py-6 4k:text-3xl bg-red-600 hover:bg-red-700 text-white rounded-lg 4k:rounded-2xl font-medium transition-colors"
          >
            Yes
          </button>
          <button
            onClick={onCancel}
            className={`flex-1 px-6 py-3 4k:px-12 4k:py-6 4k:text-3xl ${theme === 'dark' ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-300 hover:bg-gray-400 text-gray-900'} rounded-lg 4k:rounded-2xl font-medium transition-colors`}
          >
            No
          </button>
        </div>
      </div>
    </div>
  );
}


Countdown Ad.tsx:
import { useState, useEffect } from 'react';
import { Heart, Sparkles, DollarSign, Coffee, X } from 'lucide-react';


interface CountdownAdProps {
  onClose: () => void;
  onDonate: () => void;
  theme: 'light' | 'dark';
}


export function CountdownAd({ onClose, onDonate, theme }: CountdownAdProps) {
  const [countdown, setCountdown] = useState(5);
  const [canClose, setCanClose] = useState(false);


  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      setCanClose(true);
    }
  }, [countdown]);


  return (
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/90 p-4 4k:p-8">
      <div className={`${theme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-2xl 4k:rounded-[3rem] p-8 4k:p-16 max-w-xl 4k:max-w-6xl w-full shadow-2xl relative`}>
        {canClose && (
          <button
            onClick={onClose}
            className="absolute top-4 right-4 4k:top-8 4k:right-8 p-2 4k:p-4 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-full transition-colors"
          >
            <X size={24} className="4k:w-12 4k:h-12" />
          </button>
        )}


        <div className="text-center">
          <div className="flex justify-center gap-2 4k:gap-4 mb-4 4k:mb-8">
            <Heart className="text-red-500 animate-bounce 4k:w-24 4k:h-24" size={40} />
            <Sparkles className="text-yellow-500 animate-pulse 4k:w-24 4k:h-24" size={40} />
            <Coffee className="text-orange-500 animate-bounce 4k:w-24 4k:h-24" size={40} />
          </div>


          <h2 className={`text-3xl 4k:text-7xl font-bold mb-4 4k:mb-8 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
            Wait! You've watched 10 shows! <Sparkles className="inline text-yellow-500 4k:w-16 4k:h-16" size={28} />
          </h2>


          <div className={`text-lg 4k:text-4xl mb-6 4k:mb-12 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'} space-y-3 4k:space-y-6`}>
            <p className="font-semibold text-xl 4k:text-5xl">
              You're clearly LOVING SimplStream! <Heart className="inline text-red-500 animate-pulse 4k:w-12 4k:h-12" size={24} />
            </p>


            <div className="bg-red-500/20 p-4 4k:p-8 rounded-xl 4k:rounded-3xl border-2 4k:border-4 border-red-500">
              <p className="font-bold text-lg 4k:text-4xl mb-2 4k:mb-4">But did you know?</p>
              <ul className="text-left list-disc list-inside space-y-1 4k:space-y-3">
                <li>This took MONTHS to build</li>
                <li>Server costs add up FAST</li>
                <li>I'm just ONE person maintaining this</li>
                <li>Your support keeps it AD-FREE</li>
              </ul>
            </div>


            <p className="text-2xl 4k:text-6xl font-bold text-blue-500">
              <DollarSign className="inline 4k:w-12 4k:h-12" size={24} />
              Just $1-3 would mean THE WORLD!
              <Heart className="inline text-red-500 4k:w-12 4k:h-12" size={24} />
            </p>


            <p className="italic 4k:text-3xl">
              You've already gotten SO MUCH value... won't you give back? <Coffee className="inline 4k:w-10 4k:h-10" size={20} />
            </p>
          </div>


          <button
            onClick={onDonate}
            className="w-full px-8 py-4 4k:px-16 4k:py-8 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white rounded-xl 4k:rounded-3xl font-bold text-xl 4k:text-5xl transition-all shadow-xl mb-3 4k:mb-6"
          >
            <Heart className="inline mr-2 4k:mr-4 4k:w-12 4k:h-12" size={24} />
            Yes! I'll Support SimplStream
          </button>


          {!canClose && (
            <p className="text-gray-500 text-sm 4k:text-3xl">
              You can skip in {countdown} seconds...
            </p>
          )}


          {canClose && (
            <button
              onClick={onClose}
              className={`px-6 py-2 4k:px-12 4k:py-4 ${theme === 'dark' ? 'text-gray-400' : 'text-gray-600'} hover:underline text-sm 4k:text-3xl`}
            >
              Maybe later (but please reconsider!)
            </button>
          )}
        </div>
      </div>
    </div>
  );
}


DetailView.tsx:
import { useState, useEffect } from 'react';
import { ArrowLeft, Play, Plus, Star, Youtube, X } from 'lucide-react';
import { useTheme } from '../context/ThemeContext';
import { Profile, TMDBDetail, CastMember } from '../types';
import { tmdbFetch, getTMDBImageUrl } from '../lib/tmdb';
import { getRating, saveRating, isInWatchlist, addToWatchlist, removeFromWatchlist, getWatchHistory, generateId } from '../lib/storage';
import { CastMemberModal } from './CastMemberModal';
import { formatDuration } from '../lib/formatDuration';


interface DetailViewProps {
  profile: Profile;
  tmdbId: number;
  mediaType: 'movie' | 'tv';
  onBack: () => void;
  onPlay: (tmdbId: number, mediaType: 'movie' | 'tv', season?: number, episode?: number) => void;
}


export function DetailView({ profile, tmdbId, mediaType, onBack, onPlay }: DetailViewProps) {
  const [detail, setDetail] = useState<TMDBDetail | null>(null);
  const [userRating, setUserRating] = useState<number>(0);
  const [similar, setSimilar] = useState<any[]>([]);
  const [inWatchlist, setInWatchlist] = useState(false);
  const [continueFrom, setContinueFrom] = useState<any>(null);
  const [selectedCastMember, setSelectedCastMember] = useState<CastMember | null>(null);
  const [showTrailer, setShowTrailer] = useState(false);
  const { effectiveTheme } = useTheme();


  useEffect(() => {
    loadDetail();
    loadUserRating();
    loadSimilar();
    checkWatchlist();
    loadWatchHistory();
  }, [tmdbId, mediaType]);


  async function loadDetail() {
    try {
      const data = await tmdbFetch(`/${mediaType}/${tmdbId}?append_to_response=videos,credits,content_ratings`);
      setDetail(data);
    } catch (error) {
      console.error('Error loading detail:', error);
    }
  }


  function loadUserRating() {
    try {
      const rating = getRating(profile.id, tmdbId, mediaType);
      if (rating) {
        setUserRating(rating.rating);
      }
    } catch (error) {
      console.error('Error loading rating:', error);
    }
  }


  async function loadSimilar() {
    try {
      const data = await tmdbFetch(`/${mediaType}/${tmdbId}/similar`);
      setSimilar(data.results?.slice(0, 10) || []);
    } catch (error) {
      console.error('Error loading similar:', error);
    }
  }


  function checkWatchlist() {
    try {
      setInWatchlist(isInWatchlist(profile.id, tmdbId));
    } catch (error) {
      console.error('Error checking watchlist:', error);
    }
  }


  function loadWatchHistory() {
    try {
      const history = getWatchHistory(profile.id)
        .filter(h => h.tmdb_id === tmdbId && h.media_type === mediaType)
        .sort((a, b) => new Date(b.last_watched).getTime() - new Date(a.last_watched).getTime());


      if (history.length > 0) {
        setContinueFrom(history[0]);
      }
    } catch (error) {
      console.error('Error loading watch history:', error);
    }
  }


  function handleRating(rating: number) {
    try {
      saveRating({
        id: generateId(),
        profile_id: profile.id,
        tmdb_id: tmdbId,
        media_type: mediaType,
        rating,
        genres: detail?.genres || [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
      setUserRating(rating);
    } catch (error) {
      console.error('Error saving rating:', error);
    }
  }


  function toggleWatchlist() {
    try {
      if (inWatchlist) {
        removeFromWatchlist(profile.id, tmdbId);
        setInWatchlist(false);
      } else {
        addToWatchlist({
          id: generateId(),
          profile_id: profile.id,
          tmdb_id: tmdbId,
          media_type: mediaType,
          title: detail?.title || detail?.name || '',
          poster_path: detail?.poster_path || undefined,
          created_at: new Date().toISOString()
        });
        setInWatchlist(true);
      }
    } catch (error) {
      console.error('Error toggling watchlist:', error);
    }
  }


  if (!detail) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-2xl">Loading...</div>
      </div>
    );
  }


  const title = detail.title || detail.name;
  const releaseDate = detail.release_date || detail.first_air_date;
  const trailer = detail.videos?.results?.find(v => v.type === 'Trailer' && v.site === 'YouTube');


  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <div className={`fixed top-0 left-0 right-0 z-50 ${effectiveTheme === 'dark' ? 'bg-gradient-to-b from-black via-black/95 to-transparent' : 'bg-gradient-to-b from-white via-white/95 to-transparent'}`}>
        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto px-4 sm:px-8 py-4 sm:py-6">
          <button
            onClick={onBack}
            className={`flex items-center gap-2 sm:gap-3 ${textClass} hover:text-blue-400 transition-colors`}
          >
            <ArrowLeft className="w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10" />
            <span className="font-medium text-lg sm:text-xl lg:text-2xl">Back</span>
          </button>
        </div>
      </div>


      <div className="pt-16 sm:pt-20">
        <div className="relative h-[50vh] sm:h-[70vh] overflow-hidden">
          <div
            className="absolute inset-0 bg-cover bg-center"
            style={{
              backgroundImage: `url(${getTMDBImageUrl(detail.backdrop_path, 'original')})`,
            }}
          >
            <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-r from-black via-black/70 to-transparent' : 'bg-gradient-to-r from-white via-white/70 to-transparent'}`}></div>
            <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-t from-black via-transparent to-transparent' : 'bg-gradient-to-t from-white via-transparent to-transparent'}`}></div>
          </div>


          <div className="relative z-10 h-full flex items-end max-w-[90%] 4xl:max-w-[2400px] mx-auto px-4 sm:px-8 pb-8 sm:pb-16">
            <div className="max-w-5xl">
              <h1 className={`text-3xl sm:text-6xl lg:text-8xl font-bold mb-3 sm:mb-6 drop-shadow-2xl ${textClass}`}>{title}</h1>
              <div className="flex flex-wrap items-center gap-3 sm:gap-6 text-sm sm:text-2xl lg:text-3xl mb-3 sm:mb-6">
                <span className="flex items-center gap-1 sm:gap-3">
                  <Star className="w-4 h-4 sm:w-7 sm:h-7 lg:w-9 lg:h-9" fill="#EAB308" stroke="#EAB308" />
                  <span className="text-yellow-400 font-bold">{detail.vote_average.toFixed(1)}/10</span>
                </span>
                <span className={textClass}>{releaseDate?.slice(0, 4)}</span>
                {mediaType === 'tv' && detail.number_of_seasons && (
                  <span className={textClass}>{detail.number_of_seasons} Season{detail.number_of_seasons > 1 ? 's' : ''}</span>
                )}
                {detail.runtime && <span className={textClass}>{formatDuration(detail.runtime)}</span>}
              </div>
            </div>
          </div>
        </div>


        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto px-4 sm:px-8 py-6 sm:py-10">
          <div className="flex flex-wrap gap-3 sm:gap-6 mb-6 sm:mb-10">
            <button
              onClick={() => onPlay(tmdbId, mediaType, continueFrom?.season || 1, continueFrom?.episode || 1)}
              className={`flex-1 sm:flex-none px-6 sm:px-10 py-3 sm:py-5 text-base sm:text-xl lg:text-2xl ${effectiveTheme === 'dark' ? 'bg-white text-black hover:bg-gray-200' : 'bg-black text-white hover:bg-gray-800'} rounded font-bold transition-all flex items-center justify-center gap-2 sm:gap-3 min-w-[140px]`}
            >
              <Play className="w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8" fill="currentColor" />
              <span className="hidden sm:inline">{continueFrom && continueFrom.position ? (() => {
                const hours = Math.floor(continueFrom.position / 3600);
                const minutes = Math.floor((continueFrom.position % 3600) / 60);
                const seconds = Math.floor(continueFrom.position % 60);
                return `Continue from ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
              })() : 'Play'}</span>
              <span className="sm:hidden">Play</span>
            </button>
            <button
              onClick={toggleWatchlist}
              className={`flex-1 sm:flex-none px-6 sm:px-10 py-3 sm:py-5 text-base sm:text-xl lg:text-2xl rounded font-bold transition-all flex items-center justify-center gap-2 sm:gap-3 min-w-[140px] ${
                inWatchlist
                  ? `${effectiveTheme === 'dark' ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-300 hover:bg-gray-400'} ${textClass}`
                  : `${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm ${textClass}`
              }`}
            >
              <Plus className="w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8" />
              <span className="hidden sm:inline">{inWatchlist ? 'In My List' : 'Add to List'}</span>
              <span className="sm:hidden">{inWatchlist ? 'Saved' : 'Add'}</span>
            </button>
            {trailer && (
              <button
                onClick={() => setShowTrailer(true)}
                className={`flex-1 sm:flex-none px-6 sm:px-10 py-3 sm:py-5 text-base sm:text-xl lg:text-2xl ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded font-bold transition-all flex items-center justify-center gap-2 sm:gap-3 min-w-[140px] ${textClass}`}
              >
                <Youtube className="w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8" />
                <span className="hidden sm:inline">Watch Trailer</span>
                <span className="sm:hidden">Trailer</span>
              </button>
            )}
          </div>


          <div className="mb-6 sm:mb-10">
            <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-3 sm:mb-4">Rate this {mediaType === 'movie' ? 'movie' : 'show'}</h3>
            <div className="flex gap-2 sm:gap-4">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  onClick={() => handleRating(star)}
                  className="transition-transform hover:scale-110"
                >
                  <Star
                    className="w-8 h-8 sm:w-10 sm:h-10 lg:w-14 lg:h-14 transition-colors"
                    fill={star <= userRating ? '#EAB308' : 'none'}
                    stroke={star <= userRating ? '#EAB308' : '#6B7280'}
                  />
                </button>
              ))}
            </div>
          </div>


          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-10 mb-10 sm:mb-16">
            <div className="lg:col-span-2">
              <p className={`text-base sm:text-xl lg:text-2xl ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} mb-6 sm:mb-8 leading-relaxed`}>{detail.overview}</p>
            </div>
            <div className="space-y-4 sm:space-y-6">
              {detail.genres && detail.genres.length > 0 && (
                <div>
                  <h4 className={`text-lg sm:text-xl lg:text-2xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-2 sm:mb-3`}>Genres</h4>
                  <div className="flex flex-wrap gap-2 sm:gap-3">
                    {detail.genres.map((genre) => (
                      <span key={genre.id} className={`px-3 sm:px-5 py-2 sm:py-3 text-sm sm:text-base lg:text-lg ${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-200'} rounded-full`}>
                        {genre.name}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>


          {detail.credits?.cast && detail.credits.cast.length > 0 && (
            <div className="mb-10 sm:mb-16">
              <h3 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-4 sm:mb-6">Cast</h3>
              <div className="flex gap-4 sm:gap-6 overflow-x-auto scrollbar-hide pb-4">
                {detail.credits.cast.slice(0, 10).map((actor) => (
                  <button
                    key={actor.id}
                    onClick={() => setSelectedCastMember(actor)}
                    className="flex-shrink-0 w-32 sm:w-44 lg:w-52 group cursor-pointer transition-transform hover:scale-105"
                  >
                    <img
                      src={getTMDBImageUrl(actor.profile_path, 'w185')}
                      alt={actor.name}
                      className="w-full h-32 sm:h-44 lg:h-52 object-cover rounded-lg mb-2 sm:mb-3 group-hover:ring-2 group-hover:ring-blue-500"
                      onError={(e) => {
                        e.currentTarget.src = 'https://via.placeholder.com/185x278?text=No+Image';
                      }}
                    />
                    <p className="font-medium text-sm sm:text-base lg:text-lg group-hover:text-blue-400 truncate">{actor.name}</p>
                    <p className="text-gray-400 text-xs sm:text-sm lg:text-base truncate">{actor.character}</p>
                  </button>
                ))}
              </div>
            </div>
          )}


          {selectedCastMember && (
            <CastMemberModal
              castMember={selectedCastMember}
              onClose={() => setSelectedCastMember(null)}
            />
          )}


          {showTrailer && trailer && (
            <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/90 p-4">
              <div className={`${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-lg overflow-hidden max-w-5xl w-full`}>
                <div className="flex justify-between items-center p-4 border-b ${effectiveTheme === 'dark' ? 'border-gray-800' : 'border-gray-200'}">
                  <h3 className={`text-xl font-bold ${textClass}`}>Trailer</h3>
                  <button onClick={() => setShowTrailer(false)} className={`${effectiveTheme === 'dark' ? 'text-gray-400 hover:text-white' : 'text-gray-600 hover:text-black'}`}>
                    <X size={24} />
                  </button>
                </div>
                <div className="aspect-video">
                  <iframe
                    src={`https://www.youtube.com/embed/${trailer.key}`}
                    className="w-full h-full"
                    allow="autoplay; encrypted-media"
                    allowFullScreen
                  />
                </div>
              </div>
            </div>
          )}


          {similar.length > 0 && (
            <div>
              <h3 className={`text-2xl sm:text-3xl lg:text-4xl font-bold mb-4 sm:mb-6 ${textClass}`}>More Like This</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7 gap-3 sm:gap-6">
                {similar.map((item) => (
                  <button
                    key={item.id}
                    className="group cursor-pointer"
                  >
                    <div className="rounded-lg overflow-hidden transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl">
                      <img
                        src={getTMDBImageUrl(item.poster_path, 'w342')}
                        alt={item.title || item.name}
                        className="w-full h-60 sm:h-80 lg:h-96 object-cover"
                      />
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


DonationPage.tsx:
import { Heart, Sparkles, Gift, Coffee, Star } from 'lucide-react';


interface DonationPageProps {
  onClose: () => void;
  theme: 'light' | 'dark';
}


export function DonationPage({ onClose, theme }: DonationPageProps) {
  const handleDonate = () => {
    window.open('https://cash.app/$justanormalchrurro', '_blank');
  };


  return (
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/90 p-4 overflow-y-auto">
      <div className={`${theme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-2xl p-8 max-w-2xl w-full shadow-2xl`}>
        <div className="text-center">
          <div className="flex justify-center gap-2 mb-4">
            <Heart className="text-red-500 animate-pulse" size={48} />
            <Sparkles className="text-yellow-500 animate-pulse" size={48} />
            <Gift className="text-blue-500 animate-pulse" size={48} />
          </div>


          <h1 className={`text-4xl font-bold mb-6 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
            Support SimplStream! <Star className="inline text-yellow-500 animate-spin" size={32} />
          </h1>


          <div className={`text-lg mb-8 ${theme === 'dark' ? 'text-gray-300' : 'text-gray-700'} space-y-4`}>
            <p className="flex items-center justify-center gap-2">
              <Coffee size={24} className="text-orange-500" />
              SimplStream is completely FREE for you to use!
            </p>


            <p className="font-semibold text-2xl text-red-500">
              But it takes TIME, EFFORT, and LOVE to maintain! <Heart className="inline animate-bounce" size={28} />
            </p>


            <div className="bg-gradient-to-r from-red-500/20 to-orange-500/20 p-6 rounded-xl border-2 border-red-500">
              <p className="font-bold text-xl mb-2">Every donation helps:</p>
              <ul className="text-left list-disc list-inside space-y-2">
                <li>Keep the servers running 24/7</li>
                <li>Add new features YOU request</li>
                <li>Fix bugs and improve performance</li>
                <li>Keep SimplStream AD-FREE (mostly!)</li>
                <li>Support a solo developer who made this possible</li>
              </ul>
            </div>


            <p className="text-2xl font-bold text-blue-500 flex items-center justify-center gap-2">
              <Sparkles size={24} />
              Even $1 makes a HUGE difference!
              <Sparkles size={24} />
            </p>


            <p className="italic text-xl">
              If SimplStream has brought you joy, please consider giving back! <Heart className="inline text-red-500" size={24} />
            </p>
          </div>


          <button
            onClick={handleDonate}
            className="w-full px-8 py-4 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white rounded-xl font-bold text-2xl transition-all shadow-xl mb-4 animate-pulse"
          >
            <Gift className="inline mr-2" size={28} />
            Donate Now via Cash App
            <Heart className="inline ml-2" size={28} />
          </button>


          <button
            onClick={onClose}
            className={`px-6 py-3 ${theme === 'dark' ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-300 hover:bg-gray-400 text-gray-900'} rounded-lg font-medium transition-colors`}
          >
            Maybe Later
          </button>
        </div>
      </div>
    </div>
  );
}


 Footer.tsx:
import { FileText, Info, Mail, Heart, Sparkles } from 'lucide-react';
import { useTheme } from '../context/ThemeContext';


interface FooterProps {
  onShowAbout: () => void;
  onShowTerms: () => void;
  onShowDonation?: () => void;
}


export function Footer({ onShowAbout, onShowTerms, onShowDonation }: FooterProps) {
  const { effectiveTheme } = useTheme();


  const bgClass = effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white border-t border-gray-200';
  const textClass = effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600';


  return (
    <footer className={`${bgClass} py-8 mt-20`}>
      <div className="max-w-7xl mx-auto px-6">
        <div className="flex flex-col items-center gap-6 mb-6">
          <button
            onClick={onShowDonation}
            className="px-8 py-4 bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white rounded-xl font-bold text-lg transition-all shadow-xl animate-pulse flex items-center gap-2"
          >
            <Heart size={24} />
            <Sparkles size={20} />
            Support SimplStream - Donate Now!
            <Sparkles size={20} />
            <Heart size={24} />
          </button>
          <p className={`text-center text-sm ${textClass} max-w-2xl`}>
            <strong className="text-red-500">SimplStream is FREE because of YOUR support!</strong>
            <Heart className="inline text-red-500 mx-1" size={16} />
            This is a passion project by one developer. Server costs, maintenance, and new features take time and money.
            <strong> If you love SimplStream, please consider donating even just $1-3!</strong>
            <Sparkles className="inline text-yellow-500 mx-1" size={16} />
            Every contribution helps keep the lights on and makes SimplStream better for everyone!
          </p>
        </div>


        <div className="flex flex-col md:flex-row items-center justify-between gap-6">
          <div className="flex items-center gap-6">
            <button
              onClick={onShowAbout}
              className={`flex items-center gap-2 ${textClass} hover:text-blue-500 transition-colors`}
            >
              <Info size={18} />
              <span>About</span>
            </button>
            <button
              onClick={onShowTerms}
              className={`flex items-center gap-2 ${textClass} hover:text-blue-500 transition-colors`}
            >
              <FileText size={18} />
              <span>Terms & Conditions</span>
            </button>
            <a
              href="mailto:admin.simplstream@protonmail.com"
              className={`flex items-center gap-2 ${textClass} hover:text-blue-500 transition-colors`}
            >
              <Mail size={18} />
              <span>Contact</span>
            </a>
          </div>
        </div>


        <div className={`mt-6 pt-6 border-t ${effectiveTheme === 'dark' ? 'border-gray-800' : 'border-gray-200'}`}>
          <p className={`text-center text-sm ${textClass} leading-relaxed`}>
            © 2025 <span className={effectiveTheme === 'dark' ? 'text-white' : 'text-black'}>SimplStream</span> by <span className={effectiveTheme === 'dark' ? 'text-white' : 'text-black'}>Andy</span>. All rights reserved.
          </p>
          <p className={`text-center text-sm ${textClass} mt-2 leading-relaxed`}>
            Website design and interface are the exclusive property of Andy and SimplStream.
          </p>
          <p className={`text-center text-sm ${textClass} mt-2 leading-relaxed`}>
            Movies, shows, and data are provided by third-party streaming servers (VidSRC, Vidlink Pro, 111Movies, Videasy, Vidfast, and others) and TMDB.
          </p>
          <p className={`text-center text-sm ${textClass} mt-2 leading-relaxed`}>
            Live TV channels are provided through DaddyLive embed streams.
          </p>
          <p className={`text-center text-sm ${textClass} mt-2 leading-relaxed`}>
            SimplStream does not host, upload, or distribute copyrighted files; copyright remains with the respective owners.
          </p>
          <p className={`text-center text-sm ${textClass} mt-2 italic`}>
            "This product uses the TMDB API but is not endorsed or certified by TMDB."
          </p>
          <p className={`text-center text-sm ${textClass} mt-4 leading-relaxed`}>
            Have issues with Live TV channels or want to suggest new ones? <a href="mailto:admin.simplstream@protonmail.com" className="text-blue-500 hover:text-blue-600">Contact us</a>
          </p>
        </div>
      </div>
    </footer>
  );
}


FullscreenAd.tsx:
import { useState, useEffect } from 'react';
import { Heart, Sparkles, Coffee, Zap, Star } from 'lucide-react';


interface FullscreenAdProps {
  onClose: () => void;
  onDonate: () => void;
  theme: 'light' | 'dark';
}


export function FullscreenAd({ onClose, onDonate, theme }: FullscreenAdProps) {
  const [countdown, setCountdown] = useState(10);


  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      onClose();
    }
  }, [countdown, onClose]);


  return (
    <div className={`fixed inset-0 z-[100] flex items-center justify-center ${theme === 'dark' ? 'bg-gradient-to-br from-purple-900 to-blue-900' : 'bg-gradient-to-br from-purple-500 to-blue-500'} p-4 4k:p-8 overflow-y-auto`}>
      <div className="text-center max-w-3xl 4k:max-w-[120rem]">
        <div className="flex justify-center gap-4 4k:gap-8 mb-6 4k:mb-12 animate-bounce">
          <Star className="text-yellow-300 4k:w-40 4k:h-40" size={60} />
          <Heart className="text-red-300 4k:w-40 4k:h-40" size={60} />
          <Sparkles className="text-yellow-300 4k:w-40 4k:h-40" size={60} />
          <Coffee className="text-orange-300 4k:w-40 4k:h-40" size={60} />
          <Zap className="text-yellow-300 4k:w-40 4k:h-40" size={60} />
        </div>


        <h1 className="text-5xl md:text-7xl 4k:text-[12rem] font-bold text-white mb-8 4k:mb-16 drop-shadow-2xl">
          Still Watching? <Heart className="inline animate-pulse text-red-300 4k:w-52 4k:h-52" size={64} />
        </h1>


        <div className="text-white text-xl md:text-2xl 4k:text-6xl space-y-6 4k:space-y-12 mb-10 4k:mb-20">
          <p className="font-bold text-3xl 4k:text-8xl animate-pulse">
            SimplStream has been serving you NON-STOP!
          </p>


          <div className="bg-white/20 backdrop-blur-md p-6 4k:p-12 rounded-2xl 4k:rounded-[3rem] border-2 4k:border-4 border-white/50">
            <p className="font-bold text-2xl 4k:text-7xl mb-4 4k:mb-8">Here's what you get for FREE:</p>
            <ul className="text-left list-disc list-inside space-y-2 4k:space-y-4 text-lg 4k:text-5xl">
              <li>Unlimited movies & TV shows</li>
              <li>Live TV channels</li>
              <li>No subscription fees EVER</li>
              <li>Beautiful, ad-light experience</li>
              <li>Made with LOVE by one developer</li>
            </ul>
          </div>


          <p className="font-bold text-4xl 4k:text-9xl text-yellow-300 drop-shadow-lg">
            <Sparkles className="inline animate-spin 4k:w-32 4k:h-32" size={40} />
            ALL I ASK: Consider a small donation!
            <Sparkles className="inline animate-spin 4k:w-32 4k:h-32" size={40} />
          </p>


          <p className="text-2xl 4k:text-7xl italic">
            You've been here a while... surely SimplStream is worth $1-5? <Coffee className="inline 4k:w-24 4k:h-24" size={32} />
          </p>


          <p className="text-xl 4k:text-6xl text-red-300 font-semibold">
            Without support, SimplStream might not survive <Heart className="inline animate-bounce 4k:w-20 4k:h-20" size={28} />
          </p>
        </div>


        <button
          onClick={onDonate}
          className="px-12 py-6 4k:px-24 4k:py-12 bg-white text-purple-600 hover:bg-gray-100 rounded-2xl 4k:rounded-[3rem] font-bold text-3xl 4k:text-8xl transition-all shadow-2xl mb-6 4k:mb-12 animate-pulse"
        >
          <Heart className="inline mr-3 4k:mr-6 4k:w-24 4k:h-24" size={36} />
          Donate & Keep SimplStream Alive!
          <Sparkles className="inline ml-3 4k:ml-6 4k:w-24 4k:h-24" size={36} />
        </button>


        <p className="text-white/70 text-lg 4k:text-5xl">
          Auto-closing in {countdown} seconds...
        </p>
      </div>
    </div>
  );
}



HomeView.tsx:
import { useState, useEffect, useRef } from 'react';
import { Search, Play, Plus, Info, Sun, Moon, ChevronDown, X, Film, Sparkles } from 'lucide-react';
import { Profile, TMDBMovie, TMDBShow, WatchlistItem } from '../types';
import { tmdbFetch, getTMDBImageUrl } from '../lib/tmdb';
import { getWatchlist, addToWatchlist, removeFromWatchlist, getWatchHistory, saveProfile, deleteProfile, deleteAllData, isInWatchlist, exportProfileData, importProfileData } from '../lib/storage';
import { useTheme } from '../context/ThemeContext';
import { Footer } from './Footer';
import { InactivityWarning } from './InactivityWarning';
import { ConfirmDeleteModal } from './ConfirmDeleteModal';
import { DonationPage } from './DonationPage';
import { BannerAd } from './BannerAd';
import { CountdownAd } from './CountdownAd';
import { FullscreenAd } from './FullscreenAd';
import { PopupAd } from './PopupAd';


interface HomeViewProps {
  profile: Profile;
  onLogout: () => void;
  onShowDetail: (id: number, type: 'movie' | 'tv') => void;
  onShowLiveTV: () => void;
  onProfileUpdate: () => void;
  onShowAbout: () => void;
  onShowTerms: () => void;
  onShowSurprise: () => void;
}


export function HomeView({ profile, onLogout, onShowDetail, onShowLiveTV, onProfileUpdate, onShowAbout, onShowTerms, onShowSurprise }: HomeViewProps) {
  const [scrolled, setScrolled] = useState(false);
  const [hero, setHero] = useState<(TMDBMovie | TMDBShow) | null>(null);
  const [trendingMovies, setTrendingMovies] = useState<TMDBMovie[]>([]);
  const [trendingShows, setTrendingShows] = useState<TMDBShow[]>([]);
  const [popularMovies, setPopularMovies] = useState<TMDBMovie[]>([]);
  const [popularShows, setPopularShows] = useState<TMDBShow[]>([]);
  const [watchlist, setWatchlist] = useState<WatchlistItem[]>([]);
  const [continueWatching, setContinueWatching] = useState<any[]>([]);
  const [showProfileMenu, setShowProfileMenu] = useState(false);
  const [showSearch, setShowSearch] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<(TMDBMovie | TMDBShow)[]>([]);
  const [showModal, setShowModal] = useState<string | null>(null);
  const [modalInput, setModalInput] = useState('');
  const [modalInput2, setModalInput2] = useState('');
  const [selectedColor, setSelectedColor] = useState(profile.avatar_color);
  const [activeTab, setActiveTab] = useState<'home' | 'movies' | 'tv' | 'mylist'>('home');
  const [confirmDelete, setConfirmDelete] = useState<{show: boolean, id: number, title: string, type: 'watchlist' | 'continue'} | null>(null);
  const [showDonationPage, setShowDonationPage] = useState(false);
  const [showBannerAd, setShowBannerAd] = useState(false);
  const [showCountdownAd, setShowCountdownAd] = useState(false);
  const [showFullscreenAd, setShowFullscreenAd] = useState(false);
  const [showPopupAd, setShowPopupAd] = useState(false);
  const [clickCount, setClickCount] = useState(0);
  const bannerTimerRef = useRef<NodeJS.Timeout | null>(null);
  const fullscreenAdTimerRef = useRef<NodeJS.Timeout | null>(null);
  const popupAdTimerRef = useRef<NodeJS.Timeout | null>(null);
  const adsRemoved = profile.ads_removed || false;
  const { effectiveTheme, toggleTheme } = useTheme();
  const profileMenuRef = useRef<HTMLDivElement>(null);
  const [showInactivityWarning, setShowInactivityWarning] = useState(false);
  const [inactivityDisabled, setInactivityDisabled] = useState(() => {
    return localStorage.getItem('simplstream_inactivity_disabled') === 'true';
  });
  const inactivityTimerRef = useRef<NodeJS.Timeout | null>(null);
  const lastActivityRef = useRef<number>(Date.now());


  useEffect(() => {
    const handleScroll = () => setScrolled(window.scrollY > 50);
    const handleClickOutside = (e: MouseEvent) => {
      if (profileMenuRef.current && !profileMenuRef.current.contains(e.target as Node)) {
        setShowProfileMenu(false);
      }
    };


    window.addEventListener('scroll', handleScroll);
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      window.removeEventListener('scroll', handleScroll);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);


  useEffect(() => {
    if (inactivityDisabled) return;


    const resetTimer = () => {
      lastActivityRef.current = Date.now();
      if (inactivityTimerRef.current) {
        clearTimeout(inactivityTimerRef.current);
      }
      inactivityTimerRef.current = setTimeout(() => {
        setShowInactivityWarning(true);
      }, 10 * 60 * 1000);
    };


    const handleActivity = () => {
      if (!showInactivityWarning) {
        resetTimer();
      }
    };


    resetTimer();


    window.addEventListener('mousemove', handleActivity);
    window.addEventListener('mousedown', handleActivity);
    window.addEventListener('keypress', handleActivity);
    window.addEventListener('scroll', handleActivity);
    window.addEventListener('touchstart', handleActivity);


    return () => {
      if (inactivityTimerRef.current) {
        clearTimeout(inactivityTimerRef.current);
      }
      window.removeEventListener('mousemove', handleActivity);
      window.removeEventListener('mousedown', handleActivity);
      window.removeEventListener('keypress', handleActivity);
      window.removeEventListener('scroll', handleActivity);
      window.removeEventListener('touchstart', handleActivity);
    };
  }, [inactivityDisabled, showInactivityWarning]);


  function handleStillWatching() {
    setShowInactivityWarning(false);
    lastActivityRef.current = Date.now();
  }


  function handleDontShowAgain() {
    setInactivityDisabled(true);
    localStorage.setItem('simplstream_inactivity_disabled', 'true');
    setShowInactivityWarning(false);
  }


  function handleInactivityTimeout() {
    onLogout();
  }


  useEffect(() => {
    loadContent();
    loadWatchlist();
    loadContinueWatching();
    if (!adsRemoved) {
      setShowBannerAd(true);
      startBannerAdTimer();
      startFullscreenAdTimer();
      startPopupAdTimer();
    }
  }, [profile.id, adsRemoved]);


  function startBannerAdTimer() {
    bannerTimerRef.current = setInterval(() => {
      setShowBannerAd(true);
    }, 180000);
  }


  function startFullscreenAdTimer() {
    fullscreenAdTimerRef.current = setTimeout(() => {
      if (!adsRemoved) {
        setShowFullscreenAd(true);
      }
    }, 300000);
  }


  function startPopupAdTimer() {
    popupAdTimerRef.current = setInterval(() => {
      if (!adsRemoved) {
        setShowPopupAd(true);
      }
    }, 300000);
  }


  function handleItemClick(id: number, type: 'movie' | 'tv') {
    const newCount = clickCount + 1;
    setClickCount(newCount);


    if (newCount === 10 && !adsRemoved) {
      setShowCountdownAd(true);
      setClickCount(0);
    }


    onShowDetail(id, type);
  }


  function handleDonateClick() {
    window.open('https://cash.app/$justanormalchrurro', '_blank');
  }


  function handleCloseBannerAd() {
    setShowBannerAd(false);
  }


  function handleCloseCountdownAd() {
    setShowCountdownAd(false);
  }


  function handleCloseFullscreenAd() {
    setShowFullscreenAd(false);
    if (!adsRemoved) {
      startFullscreenAdTimer();
    }
  }


  function handleClosePopupAd() {
    setShowPopupAd(false);
  }


  useEffect(() => {
    if (searchQuery.trim()) {
      searchContent();
    } else {
      setSearchResults([]);
    }
  }, [searchQuery]);


  async function loadContent() {
    try {
      const [trending, movies, shows] = await Promise.all([
        tmdbFetch('/trending/all/day'),
        tmdbFetch('/movie/popular'),
        tmdbFetch('/tv/popular')
      ]);


      const heroItem = trending.results?.[0];
      setHero(heroItem);
      setTrendingMovies(trending.results?.filter((i: any) => i.media_type === 'movie').slice(0, 10) || []);
      setTrendingShows(trending.results?.filter((i: any) => i.media_type === 'tv').slice(0, 10) || []);
      setPopularMovies(movies.results?.slice(0, 10) || []);
      setPopularShows(shows.results?.slice(0, 10) || []);
    } catch (error) {
      console.error('Error loading content:', error);
    }
  }


  async function searchContent() {
    try {
      const results = await tmdbFetch(`/search/multi?query=${encodeURIComponent(searchQuery)}`);
      setSearchResults(results.results?.filter((r: any) => r.media_type === 'movie' || r.media_type === 'tv') || []);
    } catch (error) {
      console.error('Error searching:', error);
    }
  }


  function loadWatchlist() {
    const list = getWatchlist(profile.id);
    setWatchlist(list);
  }


  function loadContinueWatching() {
    const history = getWatchHistory(profile.id);
    const uniqueHistory = history.reduce((acc: any[], current) => {
      const exists = acc.find(item =>
        item.tmdb_id === current.tmdb_id &&
        item.media_type === current.media_type &&
        item.season === current.season &&
        item.episode === current.episode
      );
      if (!exists) {
        acc.push(current);
      }
      return acc;
    }, []);
    setContinueWatching(uniqueHistory.slice(0, 10));
  }


  function handleAddToWatchlist(item: TMDBMovie | TMDBShow, type: 'movie' | 'tv') {
    const watchlistItem: WatchlistItem = {
      id: `${Date.now()}`,
      profile_id: profile.id,
      tmdb_id: item.id,
      media_type: type,
      title: 'title' in item ? item.title : item.name,
      poster_path: item.poster_path || undefined,
      created_at: new Date().toISOString()
    };
    addToWatchlist(watchlistItem);
    loadWatchlist();
    showAlert('Added to My Library!');
  }


  function handleRemoveFromWatchlist(tmdbId: number) {
    removeFromWatchlist(profile.id, tmdbId);
    loadWatchlist();
    showAlert('Removed from My Library!');
  }


  function handleConfirmDeleteWatchlist(tmdbId: number) {
    handleRemoveFromWatchlist(tmdbId);
    setConfirmDelete(null);
  }


  function handleConfirmDeleteContinue(tmdbId: number) {
    const history = getWatchHistory(profile.id);
    const filtered = history.filter(h => h.tmdb_id !== tmdbId);
    localStorage.setItem('simplstream_watch_history', JSON.stringify(filtered));
    loadContinueWatching();
    showAlert('Removed from Continue Watching!');
    setConfirmDelete(null);
  }


  function handleChangeName() {
    setShowModal('changeName');
    setModalInput(profile.name);
  }


  function handleChangeColor() {
    setShowModal('changeColor');
    setSelectedColor(profile.avatar_color);
  }


  function handleAddPassword() {
    setShowModal('addPassword');
    setModalInput('');
    setModalInput2('');
  }


  function handleChangePassword() {
    setShowModal('changePassword');
    setModalInput('');
    setModalInput2('');
  }


  function handleRemovePassword() {
    setShowModal('removePassword');
    setModalInput('');
  }


  function handleDeleteProfile() {
    if (confirm(`Are you sure you want to delete the profile "${profile.name}"? This action cannot be undone.`)) {
      deleteProfile(profile.id);
      showAlert('Profile deleted successfully!');
      onLogout();
    }
  }


  function handleDeleteAllData() {
    if (confirm('Are you sure you want to delete ALL data? This will remove all profiles and cannot be undone!')) {
      deleteAllData();
      showAlert('All data deleted!');
      onLogout();
    }
  }


  function handleRemoveAds() {
    const updatedProfile = { ...profile, ads_removed: !adsRemoved };
    saveProfile(updatedProfile);
    showAlert(adsRemoved ? 'Ads enabled!' : 'Ads removed successfully!');
    onProfileUpdate();
    setShowBannerAd(false);
    setShowCountdownAd(false);
    setShowFullscreenAd(false);
    setShowPopupAd(false);
    if (bannerTimerRef.current) clearInterval(bannerTimerRef.current);
    if (fullscreenAdTimerRef.current) clearTimeout(fullscreenAdTimerRef.current);
    if (popupAdTimerRef.current) clearInterval(popupAdTimerRef.current);
  }


  function handleExportData() {
    try {
      const jsonData = exportProfileData(profile.id);
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `simplstream-${profile.name}-${Date.now()}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      showAlert('Profile data exported successfully!');
    } catch (error) {
      showAlert('Export failed!');
    }
  }


  function handleImportData() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = async (e: any) => {
      const file = e.target?.files?.[0];
      if (file) {
        try {
          const text = await file.text();
          const success = importProfileData(text);
          if (success) {
            showAlert('Profile data imported successfully!');
            onProfileUpdate();
          } else {
            showAlert('Import failed - invalid file format!');
          }
        } catch (error) {
          showAlert('Import failed!');
        }
      }
    };
    input.click();
  }


  function submitModal() {
    if (showModal === 'changeName' && modalInput.trim()) {
      const updatedProfile = { ...profile, name: modalInput.trim() };
      saveProfile(updatedProfile);
      showAlert('Name changed successfully!');
      onProfileUpdate();
      setShowModal(null);
    } else if (showModal === 'changeColor') {
      const updatedProfile = { ...profile, avatar_color: selectedColor };
      saveProfile(updatedProfile);
      showAlert('Profile color changed successfully!');
      onProfileUpdate();
      setShowModal(null);
    } else if (showModal === 'addPassword') {
      if (modalInput.length === 4 && /^\d{4}$/.test(modalInput) && modalInput2.trim()) {
        const updatedProfile = { ...profile, pin: modalInput, security_word: modalInput2.trim() };
        saveProfile(updatedProfile);
        showAlert(`Passcode added! Your security word is: ${modalInput2.trim()} - COPY THIS SOMEWHERE SAFE!`);
        onProfileUpdate();
        setShowModal(null);
      } else {
        showAlert('Please enter a valid 4-digit passcode and security word!');
      }
    } else if (showModal === 'changePassword') {
      if (modalInput === profile.pin && modalInput2.length === 4 && /^\d{4}$/.test(modalInput2)) {
        const updatedProfile = { ...profile, pin: modalInput2 };
        saveProfile(updatedProfile);
        showAlert('Passcode changed successfully!');
        onProfileUpdate();
        setShowModal(null);
      } else {
        showAlert('Incorrect old passcode or invalid new passcode!');
      }
    } else if (showModal === 'removePassword') {
      if (modalInput === profile.pin) {
        const updatedProfile = { ...profile, pin: null, security_word: null };
        saveProfile(updatedProfile);
        showAlert('Passcode removed successfully!');
        onProfileUpdate();
        setShowModal(null);
      } else {
        showAlert('Incorrect passcode!');
      }
    }
  }


  function showAlert(message: string) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `fixed top-20 left-1/2 -translate-x-1/2 z-[100] ${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} ${effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900'} px-8 py-4 rounded-xl shadow-2xl border-2 ${effectiveTheme === 'dark' ? 'border-blue-500' : 'border-blue-600'} font-semibold text-base backdrop-blur-lg`;
    alertDiv.textContent = message;
    document.body.appendChild(alertDiv);
    setTimeout(() => {
      alertDiv.style.transition = 'opacity 0.3s ease';
      alertDiv.style.opacity = '0';
      setTimeout(() => alertDiv.remove(), 300);
    }, 2000);
  }


  const getTitle = (item: TMDBMovie | TMDBShow) => 'title' in item ? item.title : item.name;


  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';
  const headerBg = effectiveTheme === 'dark'
    ? scrolled ? 'bg-gradient-to-b from-black via-black/95 to-transparent' : 'bg-gradient-to-b from-black/80 to-transparent'
    : scrolled ? 'bg-gradient-to-b from-white via-white/95 to-transparent' : 'bg-gradient-to-b from-white/80 to-transparent';


  const handleLogoClick = () => {
    setActiveTab('home');
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <header className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${headerBg} ${scrolled ? 'shadow-2xl' : ''}`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-3 sm:py-4">
          <div className="flex items-center justify-between gap-6">
            <button onClick={handleLogoClick} className="text-xl sm:text-3xl 4k:text-5xl font-bold whitespace-nowrap hover:opacity-80 transition-opacity">
              <span className="text-blue-500">Simpl</span>
              <span className={effectiveTheme === 'dark' ? 'text-white' : 'text-black'}>Stream</span>
            </button>


            <nav className="hidden sm:flex items-center gap-6 4k:gap-12 flex-1 justify-center">
              <button onClick={() => setActiveTab('home')} className={`${activeTab === 'home' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-base 4k:text-2xl`}>Home</button>
              <button onClick={() => setActiveTab('movies')} className={`${activeTab === 'movies' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-base 4k:text-2xl`}>Movies</button>
              <button onClick={() => setActiveTab('tv')} className={`${activeTab === 'tv' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-base 4k:text-2xl`}>TV Shows</button>
              <button onClick={onShowLiveTV} className="text-gray-400 hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-base 4k:text-2xl">Live TV</button>
              <button onClick={() => setActiveTab('mylist')} className={`${activeTab === 'mylist' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-base 4k:text-2xl`}>My Library</button>
            </nav>


            <div className="flex items-center gap-2 4k:gap-4">
              <button onClick={() => setShowSearch(!showSearch)} className={`p-2 4k:p-4 hover:${effectiveTheme === 'dark' ? 'bg-white/10' : 'bg-gray-200'} rounded-full transition-colors`}>
                <Search size={18} className="sm:w-5 sm:h-5 4k:w-8 4k:h-8" />
              </button>
              <button onClick={toggleTheme} className={`p-2 4k:p-4 hover:${effectiveTheme === 'dark' ? 'bg-white/10' : 'bg-gray-200'} rounded-full transition-colors`}>
                {effectiveTheme === 'dark' ? <Sun size={18} className="sm:w-5 sm:h-5 4k:w-8 4k:h-8" /> : <Moon size={18} className="sm:w-5 sm:h-5 4k:w-8 4k:h-8" />}
              </button>
              <div className="relative" ref={profileMenuRef}>
                <button
                  onClick={() => setShowProfileMenu(!showProfileMenu)}
                  className={`flex items-center gap-1 sm:gap-2 px-2 sm:px-4 4k:px-6 py-2 4k:py-3 hover:${effectiveTheme === 'dark' ? 'bg-white/10' : 'bg-gray-200'} rounded-lg transition-colors`}
                >
                  <div
                    className="w-7 h-7 sm:w-8 sm:h-8 4k:w-14 4k:h-14 rounded flex items-center justify-center text-xs sm:text-sm 4k:text-2xl font-bold text-white"
                    style={{ backgroundColor: profile.avatar_color }}
                  >
                    {profile.name.charAt(0).toUpperCase()}
                  </div>
                  <ChevronDown size={14} className="hidden sm:block sm:w-4 sm:h-4 4k:w-7 4k:h-7" />
                </button>


                {showProfileMenu && (
                  <div className={`absolute right-0 mt-2 w-56 4k:w-80 ${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-lg shadow-2xl border ${effectiveTheme === 'dark' ? 'border-gray-700' : 'border-gray-200'} overflow-hidden z-50`}>
                    <button onClick={() => { handleChangeName(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Change Name</button>
                    <button onClick={() => { handleChangeColor(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Change Profile Color</button>
                    {!profile.pin ? (
                      <button onClick={() => { handleAddPassword(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Add Passcode</button>
                    ) : (
                      <>
                        <button onClick={() => { handleChangePassword(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Change Passcode</button>
                        <button onClick={() => { handleRemovePassword(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Remove Passcode</button>
                      </>
                    )}
                    <button onClick={() => { handleExportData(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Export Profile Data</button>
                    <button onClick={() => { handleImportData(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Import Profile Data</button>
                    <button onClick={() => { onShowSurprise(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl flex items-center gap-2`}><Sparkles size={16} className="4k:w-6 4k:h-6" />Surprise me</button>
                    <hr className={effectiveTheme === 'dark' ? 'border-gray-700' : 'border-gray-200'} />
                    <button onClick={() => { handleRemoveAds(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl ${adsRemoved ? 'text-green-500' : 'text-blue-500'} font-semibold`}>{adsRemoved ? '✓ Ads Removed' : 'Remove Ads'}</button>
                    <hr className={effectiveTheme === 'dark' ? 'border-gray-700' : 'border-gray-200'} />
                    <button onClick={() => { handleDeleteProfile(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-red-500 text-sm 4k:text-xl`}>Delete Profile</button>
                    <button onClick={() => { handleDeleteAllData(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-red-600 font-bold text-sm 4k:text-xl`}>Delete All Data</button>
                    <hr className={effectiveTheme === 'dark' ? 'border-gray-700' : 'border-gray-200'} />
                    <button onClick={() => { onLogout(); setShowProfileMenu(false); }} className={`w-full text-left px-4 py-3 4k:px-6 4k:py-4 hover:${effectiveTheme === 'dark' ? 'bg-gray-800' : 'bg-gray-100'} transition-colors text-sm 4k:text-xl`}>Sign Out</button>
                  </div>
                )}
              </div>
            </div>
          </div>


          <nav className="flex sm:hidden gap-3 overflow-x-auto pb-2 scrollbar-hide -mx-4 px-4">
            <button onClick={() => setActiveTab('home')} className={`${activeTab === 'home' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-sm`}>Home</button>
            <button onClick={() => setActiveTab('movies')} className={`${activeTab === 'movies' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-sm`}>Movies</button>
            <button onClick={() => setActiveTab('tv')} className={`${activeTab === 'tv' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-sm`}>TV Shows</button>
            <button onClick={onShowLiveTV} className="text-gray-400 hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-sm">Live TV</button>
            <button onClick={() => setActiveTab('mylist')} className={`${activeTab === 'mylist' ? (effectiveTheme === 'dark' ? 'text-white' : 'text-black') : 'text-gray-400'} hover:text-blue-400 transition-colors font-medium whitespace-nowrap text-sm`}>My Library</button>
          </nav>
        </div>


        {showSearch && (
          <div className="max-w-7xl mx-auto px-4 sm:px-6 pb-4">
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search movies and TV shows..."
                className={`w-full px-4 py-3 rounded-lg ${effectiveTheme === 'dark' ? 'bg-gray-900/90 border-gray-700' : 'bg-white border-gray-300'} border ${effectiveTheme === 'dark' ? 'text-white' : 'text-black'} placeholder-gray-400 focus:outline-none focus:border-blue-500`}
                autoFocus
              />
              <button onClick={() => { setShowSearch(false); setSearchQuery(''); }} className="absolute right-3 top-3 text-gray-400 hover:text-white">
                <X size={20} />
              </button>
            </div>
          </div>
        )}
      </header>


      {showInactivityWarning && (
        <InactivityWarning
          onStillWatching={handleStillWatching}
          onDontShowAgain={handleDontShowAgain}
          onTimeout={handleInactivityTimeout}
        />
      )}


      {showSearch && searchResults.length > 0 && (
        <div className="fixed top-32 left-0 right-0 z-40 max-w-7xl mx-auto px-4 sm:px-6">
          <div className={`${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-lg shadow-2xl p-4 max-h-96 overflow-y-auto`}>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {searchResults.map((item: any) => (
                <button
                  key={item.id}
                  onClick={() => {
                    onShowDetail(item.id, item.media_type);
                    setShowSearch(false);
                    setSearchQuery('');
                  }}
                  className="group"
                >
                  {item.poster_path ? (
                    <img
                      src={getTMDBImageUrl(item.poster_path, 'w342')}
                      alt={getTitle(item)}
                      className="w-full rounded-lg group-hover:scale-105 transition-transform"
                    />
                  ) : (
                    <div className="w-full h-64 bg-gray-800 rounded-lg flex flex-col items-center justify-center p-4">
                      <div className="relative">
                        <Film size={48} className="text-gray-600 mb-2" />
                        <X size={24} className="text-gray-600 absolute -top-1 -right-1" />
                      </div>
                      <p className="text-gray-500 text-xs text-center mt-2">No thumbnail available</p>
                    </div>
                  )}
                  <p className={`mt-2 text-sm ${effectiveTheme === 'dark' ? 'text-white' : 'text-black'} truncate`}>{getTitle(item)}</p>
                </button>
              ))}
            </div>
          </div>
        </div>
      )}


      <div className="pt-32 sm:pt-24">
        {hero && activeTab === 'home' && (
          <div className="relative h-[70vh] sm:h-[85vh] overflow-hidden">
            <div
              className="absolute inset-0 bg-cover bg-center"
              style={{ backgroundImage: `url(${getTMDBImageUrl(hero.backdrop_path, 'original')})` }}
            >
              <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-r from-black via-black/70 to-transparent' : 'bg-gradient-to-r from-white via-white/70 to-transparent'}`}></div>
              <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-t from-black via-transparent to-transparent' : 'bg-gradient-to-t from-white via-transparent to-transparent'}`}></div>
            </div>


            <div className="relative z-10 h-full flex items-center max-w-7xl mx-auto px-4 sm:px-6">
              <div className="max-w-2xl 4k:max-w-5xl">
                <h1 className={`text-3xl sm:text-6xl 4k:text-8xl font-bold mb-4 4k:mb-8 drop-shadow-2xl ${textClass}`}>{getTitle(hero)}</h1>
                <p className={`text-sm sm:text-lg 4k:text-3xl mb-6 4k:mb-10 line-clamp-3 drop-shadow-lg ${effectiveTheme === 'dark' ? 'text-gray-200' : 'text-gray-700'}`}>{hero.overview}</p>
                <div className="flex flex-wrap gap-2 sm:gap-4 4k:gap-6">
                  <button
                    onClick={() => onShowDetail(hero.id, 'title' in hero ? 'movie' : 'tv')}
                    className={`px-4 sm:px-8 4k:px-12 py-2 sm:py-3 4k:py-5 ${effectiveTheme === 'dark' ? 'bg-white text-black hover:bg-gray-200' : 'bg-black text-white hover:bg-gray-800'} rounded-lg font-bold transition-all flex items-center gap-2 4k:gap-3 shadow-xl text-sm sm:text-base 4k:text-2xl`}
                  >
                    <Play size={20} className="4k:w-10 4k:h-10" fill="currentColor" />
                    Play
                  </button>
                  {isInWatchlist(profile.id, hero.id) ? (
                    <button
                      onClick={() => handleRemoveFromWatchlist(hero.id)}
                      className={`px-4 sm:px-8 4k:px-12 py-2 sm:py-3 4k:py-5 ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded-lg font-bold transition-all flex items-center gap-2 4k:gap-3 shadow-xl text-sm sm:text-base 4k:text-2xl`}
                    >
                      <X size={20} className="4k:w-10 4k:h-10" />
                      Remove
                    </button>
                  ) : (
                    <button
                      onClick={() => handleAddToWatchlist(hero, 'title' in hero ? 'movie' : 'tv')}
                      className={`px-4 sm:px-8 4k:px-12 py-2 sm:py-3 4k:py-5 ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded-lg font-bold transition-all flex items-center gap-2 4k:gap-3 shadow-xl text-sm sm:text-base 4k:text-2xl`}
                    >
                      <Plus size={20} className="4k:w-10 4k:h-10" />
                      My Library
                    </button>
                  )}
                  <button
                    onClick={() => onShowDetail(hero.id, 'title' in hero ? 'movie' : 'tv')}
                    className={`px-4 sm:px-8 4k:px-12 py-2 sm:py-3 4k:py-5 ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded-lg font-bold transition-all flex items-center gap-2 4k:gap-3 shadow-xl text-sm sm:text-base 4k:text-2xl`}
                  >
                    <Info size={20} className="4k:w-10 4k:h-10" />
                    More Info
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}


        <div className="relative z-10 px-4 sm:px-6 pb-20 -mt-20 sm:-mt-32">
          <div className="max-w-7xl mx-auto space-y-12">
            {activeTab === 'home' && (
              <>
                {continueWatching.length > 0 && <ContentRow title="Continue Watching" items={continueWatching} onItemClick={(item: any) => handleItemClick(item.tmdb_id, item.media_type)} onRemove={(id: number, title: string) => {
                  setConfirmDelete({show: true, id, title, type: 'continue'});
                }} theme={effectiveTheme} isContinueWatching={true} />}
                {watchlist.length > 0 && <ContentRow title="My Library" items={watchlist} onItemClick={(item: any) => handleItemClick(item.tmdb_id, item.media_type)} onRemove={(id: number, title: string) => {
                  setConfirmDelete({show: true, id, title, type: 'watchlist'});
                }} theme={effectiveTheme} />}
                <ContentRow title="Trending Movies" items={trendingMovies} onItemClick={(item: any) => handleItemClick(item.id, 'movie')} onRemove={null} theme={effectiveTheme} />
                <ContentRow title="Trending TV Shows" items={trendingShows} onItemClick={(item: any) => handleItemClick(item.id, 'tv')} onRemove={null} theme={effectiveTheme} />
                <ContentRow title="Popular Movies" items={popularMovies} onItemClick={(item: any) => handleItemClick(item.id, 'movie')} onRemove={null} theme={effectiveTheme} />
                <ContentRow title="Popular TV Shows" items={popularShows} onItemClick={(item: any) => handleItemClick(item.id, 'tv')} onRemove={null} theme={effectiveTheme} />
              </>
            )}


            {activeTab === 'movies' && (
              <>
                <ContentRow title="Trending Movies" items={trendingMovies} onItemClick={(item: any) => handleItemClick(item.id, 'movie')} onRemove={null} theme={effectiveTheme} />
                <ContentRow title="Popular Movies" items={popularMovies} onItemClick={(item: any) => handleItemClick(item.id, 'movie')} onRemove={null} theme={effectiveTheme} />
              </>
            )}


            {activeTab === 'tv' && (
              <>
                <ContentRow title="Trending TV Shows" items={trendingShows} onItemClick={(item: any) => handleItemClick(item.id, 'tv')} onRemove={null} theme={effectiveTheme} />
                <ContentRow title="Popular TV Shows" items={popularShows} onItemClick={(item: any) => handleItemClick(item.id, 'tv')} onRemove={null} theme={effectiveTheme} />
              </>
            )}


            {activeTab === 'mylist' && watchlist.length > 0 && (
              <ContentRow title="My Library" items={watchlist} onItemClick={(item: any) => handleItemClick(item.tmdb_id, item.media_type)} onRemove={(id: number, title: string) => {
                setConfirmDelete({show: true, id, title, type: 'watchlist'});
              }} theme={effectiveTheme} />
            )}


            {activeTab === 'mylist' && watchlist.length === 0 && (
              <div className="text-center py-20">
                <p className={`text-2xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>Your library is empty. Add some content!</p>
              </div>
            )}
          </div>
        </div>
      </div>


      {showModal && (
        <div className="fixed inset-0 z-[100] flex items-center justify-center bg-black/80 p-4">
          <div className={`${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} rounded-lg p-8 max-w-md w-full`}>
            <div className="flex justify-between items-center mb-6">
              <h2 className={`text-2xl font-bold ${textClass}`}>
                {showModal === 'changeName' && 'Change Name'}
                {showModal === 'changeColor' && 'Change Profile Color'}
                {showModal === 'addPassword' && 'Add Passcode'}
                {showModal === 'changePassword' && 'Change Passcode'}
                {showModal === 'removePassword' && 'Remove Passcode'}
              </h2>
              <button onClick={() => setShowModal(null)} className="text-gray-400 hover:text-white">
                <X size={24} />
              </button>
            </div>


            {showModal === 'changeName' && (
              <input
                type="text"
                value={modalInput}
                onChange={(e) => setModalInput(e.target.value)}
                placeholder="Enter new name"
                className={`w-full px-4 py-3 4k:px-8 4k:py-6 4k:text-3xl rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
              />
            )}


            {showModal === 'changeColor' && (
              <div className="mb-4">
                <div className="grid grid-cols-8 gap-2 mb-3">
                  {['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316', '#6366F1', '#84CC16', '#06B6D4', '#F43F5E', '#22C55E', '#EAB308', '#A855F7', '#EC407A'].map((color, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedColor(color)}
                      className={`w-10 h-10 rounded-lg transition-all ${selectedColor === color ? 'ring-4 ring-blue-500 scale-110' : 'hover:scale-105'}`}
                      style={{ backgroundColor: color }}
                    />
                  ))}
                </div>
                <div className="flex items-center gap-2">
                  <input
                    type="color"
                    value={selectedColor}
                    onChange={(e) => setSelectedColor(e.target.value)}
                    className="w-12 h-12 rounded-lg cursor-pointer border-2 border-gray-700"
                  />
                  <span className="text-gray-400 text-sm">Or pick a custom color</span>
                </div>
              </div>
            )}


            {showModal === 'addPassword' && (
              <>
                <input
                  type="password"
                  maxLength={4}
                  value={modalInput}
                  onChange={(e) => setModalInput(e.target.value.replace(/\D/g, ''))}
                  placeholder="Enter 4-digit passcode"
                  className={`w-full px-4 py-3 4k:px-8 4k:py-6 rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} text-center text-2xl 4k:text-6xl tracking-widest placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
                />
                <input
                  type="text"
                  value={modalInput2}
                  onChange={(e) => setModalInput2(e.target.value)}
                  placeholder="Enter security word (SAVE THIS!)"
                  className={`w-full px-4 py-3 4k:px-8 4k:py-6 4k:text-3xl rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
                />
                <p className="text-red-500 text-sm 4k:text-3xl mb-4 4k:mb-8">IMPORTANT: Copy and save your security word somewhere safe! You'll need it to recover your passcode if you forget it.</p>
              </>
            )}


            {showModal === 'changePassword' && (
              <>
                <input
                  type="password"
                  maxLength={4}
                  value={modalInput}
                  onChange={(e) => setModalInput(e.target.value.replace(/\D/g, ''))}
                  placeholder="Enter old passcode"
                  className={`w-full px-4 py-3 4k:px-8 4k:py-6 rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} text-center text-2xl 4k:text-6xl tracking-widest placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
                />
                <input
                  type="password"
                  maxLength={4}
                  value={modalInput2}
                  onChange={(e) => setModalInput2(e.target.value.replace(/\D/g, ''))}
                  placeholder="Enter new passcode"
                  className={`w-full px-4 py-3 4k:px-8 4k:py-6 rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} text-center text-2xl 4k:text-6xl tracking-widest placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
                />
              </>
            )}


            {showModal === 'removePassword' && (
              <input
                type="password"
                maxLength={4}
                value={modalInput}
                onChange={(e) => setModalInput(e.target.value.replace(/\D/g, ''))}
                placeholder="Enter passcode to confirm"
                className={`w-full px-4 py-3 4k:px-8 4k:py-6 rounded-lg 4k:rounded-2xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300'} border ${textClass} text-center text-2xl 4k:text-6xl tracking-widest placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4 4k:mb-8`}
              />
            )}


            <div className="flex gap-4">
              <button
                onClick={submitModal}
                className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
              >
                Confirm
              </button>
              <button
                onClick={() => setShowModal(null)}
                className={`flex-1 px-6 py-3 ${effectiveTheme === 'dark' ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-300 hover:bg-gray-400'} rounded-lg font-medium transition-colors`}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}


      {showBannerAd && !adsRemoved && (
        <BannerAd
          theme={effectiveTheme}
          onClose={handleCloseBannerAd}
          onDonate={handleDonateClick}
        />
      )}


      {showCountdownAd && !adsRemoved && (
        <CountdownAd
          theme={effectiveTheme}
          onClose={handleCloseCountdownAd}
          onDonate={handleDonateClick}
        />
      )}


      {showFullscreenAd && !adsRemoved && (
        <FullscreenAd
          theme={effectiveTheme}
          onClose={handleCloseFullscreenAd}
          onDonate={handleDonateClick}
        />
      )}


      {showPopupAd && !adsRemoved && (
        <PopupAd
          theme={effectiveTheme}
          onClose={handleClosePopupAd}
          onDonate={handleDonateClick}
        />
      )}


      {showDonationPage && (
        <DonationPage
          theme={effectiveTheme}
          onClose={() => setShowDonationPage(false)}
        />
      )}


      {confirmDelete?.show && (
        <ConfirmDeleteModal
          title={confirmDelete.title}
          theme={effectiveTheme}
          onConfirm={() => {
            if (confirmDelete.type === 'watchlist') {
              handleConfirmDeleteWatchlist(confirmDelete.id);
            } else {
              handleConfirmDeleteContinue(confirmDelete.id);
            }
          }}
          onCancel={() => setConfirmDelete(null)}
        />
      )}


      <Footer onShowAbout={onShowAbout} onShowTerms={onShowTerms} onShowDonation={() => setShowDonationPage(true)} />
    </div>
  );
}


function ContentRow({ title, items, onItemClick, onRemove, theme, isContinueWatching = false }: any) {
  const scrollRef = useRef<HTMLDivElement>(null);


  const formatTime = (position?: number, duration?: number) => {
    if (position !== undefined && duration !== undefined && position > 0) {
      const hours = Math.floor(position / 3600);
      const minutes = Math.floor((position % 3600) / 60);
      const seconds = Math.floor(position % 60);
      return `Continue from ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    return null;
  };


  return (
    <div className="space-y-3 4k:space-y-6">
      <h2 className={`text-xl sm:text-2xl 4k:text-5xl font-bold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>{title}</h2>
      <div
        ref={scrollRef}
        className="flex gap-3 4k:gap-6 overflow-x-auto scrollbar-hide pb-4 4k:pb-8 scroll-smooth"
        style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
      >
        {items.map((item: any) => {
          const itemTitle = item.title || item.name;
          const continueText = isContinueWatching ? formatTime(item.position, item.duration) : null;
          const posterPath = item.poster_path;


          return (
            <div key={item.id || `${item.tmdb_id}-${item.season}-${item.episode}`} className="flex-shrink-0 group relative">
              <button
                onClick={() => onItemClick(item)}
                className="cursor-pointer"
              >
                <div className="w-40 sm:w-48 4k:w-80 rounded-lg overflow-hidden transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl">
                  {posterPath ? (
                    <img
                      src={getTMDBImageUrl(posterPath, 'w342')}
                      alt={itemTitle}
                      className="w-full h-56 sm:h-72 4k:h-[30rem] object-cover"
                    />
                  ) : (
                    <div className="w-full h-56 sm:h-72 4k:h-[30rem] bg-gray-800 flex flex-col items-center justify-center p-4 4k:p-8">
                      <div className="relative">
                        <Film size={48} className="text-gray-600 mb-2 4k:w-24 4k:h-24" />
                        <X size={24} className="text-gray-600 absolute -top-1 -right-1" />
                      </div>
                      <p className="text-gray-500 text-xs text-center mt-2">No thumbnail available</p>
                    </div>
                  )}
                </div>
                {(isContinueWatching || itemTitle) && (
                  <div className="mt-2 4k:mt-4 px-1">
                    <p className={`text-sm 4k:text-2xl font-medium truncate ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                      {itemTitle}
                    </p>
                    {continueText && (
                      <p className="text-xs 4k:text-xl text-gray-400 mt-1">{continueText}</p>
                    )}
                  </div>
                )}
              </button>
              {onRemove && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    onRemove(item.tmdb_id || item.id, itemTitle);
                  }}
                  className="absolute top-2 4k:top-4 right-2 4k:right-4 p-2 4k:p-4 bg-red-600 hover:bg-red-700 rounded-full opacity-0 group-hover:opacity-100 transition-opacity shadow-xl z-10"
                >
                  <X size={16} className="text-white 4k:w-8 4k:h-8" />
                </button>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}


InactivityWarning.tsx:
import { useEffect, useState } from 'react';


interface InactivityWarningProps {
  onStillWatching: () => void;
  onDontShowAgain: () => void;
  onTimeout: () => void;
}


export function InactivityWarning({ onStillWatching, onDontShowAgain, onTimeout }: InactivityWarningProps) {
  const [countdown, setCountdown] = useState(100);


  useEffect(() => {
    const interval = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          clearInterval(interval);
          onTimeout();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);


    return () => clearInterval(interval);
  }, [onTimeout]);


  return (
    <div className="fixed inset-0 z-[200] flex items-center justify-center bg-black/80 backdrop-blur-sm animate-fade-in">
      <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl border border-gray-700">
        <div className="flex justify-between items-start mb-6">
          <div>
            <h2 className="text-2xl md:text-3xl font-bold text-white mb-2">Are you still watching?</h2>
            <p className="text-gray-400 text-sm md:text-base">You've been inactive for 10 minutes</p>
          </div>
        </div>


        <div className="mb-6">
          <div className="text-center">
            <p className="text-gray-300 text-base md:text-lg mb-3">Returning to profile selection in</p>
            <div className="text-6xl md:text-7xl font-bold text-blue-500 mb-2">{countdown}</div>
            <p className="text-gray-400 text-sm">seconds</p>
          </div>
        </div>


        <div className="flex flex-col gap-3">
          <button
            onClick={onStillWatching}
            className="w-full px-6 py-4 bg-blue-600 hover:bg-blue-700 text-white rounded-xl font-bold text-base md:text-lg transition-all transform hover:scale-105 shadow-lg"
          >
            I'm still watching
          </button>
          <button
            onClick={onDontShowAgain}
            className="w-full px-6 py-4 bg-gray-700 hover:bg-gray-600 text-white rounded-xl font-medium text-sm md:text-base transition-all"
          >
            Don't show again
          </button>
        </div>
      </div>
    </div>
  );
}


LiveTVview.tsx:
import { useState, useEffect } from 'react';
import { ArrowLeft, Plus, Check, List, Grid, Search } from 'lucide-react';
import { Profile, LiveChannel } from '../types';
import { LIVE_CHANNELS, CHANNEL_DESCRIPTIONS } from '../lib/liveChannels';
import { getWatchlist, addToWatchlist, removeFromWatchlist, generateId } from '../lib/storage';
import { useTheme } from '../context/ThemeContext';


interface LiveTVViewProps {
  profile: Profile;
  onBack: () => void;
  onPlay: (tmdbId: number, mediaType: 'movie' | 'tv' | 'live', season?: number, episode?: number, embedUrl?: string, channelName?: string) => void;
}


export function LiveTVView({ profile, onBack, onPlay }: LiveTVViewProps) {
  const [watchlist, setWatchlist] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedCategory, setSelectedCategory] = useState<string>('All');
  const [searchQuery, setSearchQuery] = useState('');
  const { effectiveTheme } = useTheme();


  const categories = ['All', ...Array.from(new Set(LIVE_CHANNELS.map(ch => ch.category)))];


  useEffect(() => {
    loadWatchlist();
  }, [profile.id]);


  function loadWatchlist() {
    try {
      const list = getWatchlist(profile.id).filter(item => item.media_type === 'live');
      setWatchlist(list.map(item => item.title));
    } catch (error) {
      console.error('Error loading watchlist:', error);
    }
  }


  function toggleWatchlist(channel: LiveChannel) {
    const isInWatchlist = watchlist.includes(channel.name);


    try {
      if (isInWatchlist) {
        const list = getWatchlist(profile.id);
        const item = list.find(w => w.title === channel.name && w.media_type === 'live');
        if (item?.tmdb_id !== undefined) {
          removeFromWatchlist(profile.id, item.tmdb_id);
        }
        setWatchlist(watchlist.filter(name => name !== channel.name));
      } else {
        addToWatchlist({
          id: generateId(),
          profile_id: profile.id,
          tmdb_id: undefined,
          media_type: 'live',
          title: channel.name,
          poster_path: undefined,
          embed_url: channel.embed,
          created_at: new Date().toISOString()
        });
        setWatchlist([...watchlist, channel.name]);
      }
    } catch (error) {
      console.error('Error toggling watchlist:', error);
    }
  }


  let filteredChannels = selectedCategory === 'All'
    ? LIVE_CHANNELS
    : LIVE_CHANNELS.filter(ch => ch.category === selectedCategory);


  if (searchQuery.trim()) {
    filteredChannels = filteredChannels.filter(ch =>
      ch.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      ch.channelNumber.toString().includes(searchQuery.trim())
    );
  }




  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <div className={`fixed top-0 left-0 right-0 z-50 ${effectiveTheme === 'dark' ? 'bg-gradient-to-b from-black via-black/95 to-transparent' : 'bg-gradient-to-b from-white via-white/95 to-transparent'}`}>
        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto px-4 sm:px-8 py-4 sm:py-6">
          <div className="flex items-center justify-between gap-2 sm:gap-4">
            <button
              onClick={onBack}
              className={`flex items-center gap-2 sm:gap-3 ${textClass} hover:text-blue-400 transition-colors flex-shrink-0`}
            >
              <ArrowLeft className="w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10" />
              <span className="font-medium text-base sm:text-xl lg:text-2xl">Back</span>
            </button>
            <h1 className={`text-2xl sm:text-4xl lg:text-5xl font-bold ${textClass} truncate`}>Live TV</h1>
            <div className="flex items-center gap-2 sm:gap-4 flex-shrink-0">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 sm:p-3 lg:p-4 rounded transition-colors ${viewMode === 'grid' ? 'bg-blue-600 text-white' : effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700' : 'bg-gray-200 hover:bg-gray-300'}`}
              >
                <Grid className="w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-2 sm:p-3 lg:p-4 rounded transition-colors ${viewMode === 'list' ? 'bg-blue-600 text-white' : effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700' : 'bg-gray-200 hover:bg-gray-300'}`}
              >
                <List className="w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8" />
              </button>
            </div>
          </div>
        </div>
      </div>


      <div className="pt-24 sm:pt-32 lg:pt-36 px-4 sm:px-8 pb-20">
        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto">
          <div className="mb-6 sm:mb-8">
            <div className="relative">
              <Search className={`absolute left-4 sm:left-6 top-1/2 transform -translate-y-1/2 ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-500'} w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7`} />
              <input
                type="text"
                placeholder="Search channels or numbers..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className={`w-full pl-12 sm:pl-16 pr-4 sm:pr-6 py-3 sm:py-5 text-base sm:text-lg lg:text-xl rounded-lg ${effectiveTheme === 'dark' ? 'bg-gray-800 text-white border-gray-700' : 'bg-white text-black border-gray-300'} border focus:outline-none focus:border-blue-500`}
              />
            </div>
          </div>


          <div className="mb-6 sm:mb-10 flex gap-2 sm:gap-4 overflow-x-auto pb-2 scrollbar-hide">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`px-4 sm:px-8 py-2 sm:py-3 text-sm sm:text-lg lg:text-xl rounded-full font-medium whitespace-nowrap transition-colors ${
                  selectedCategory === category
                    ? 'bg-blue-600 text-white'
                    : effectiveTheme === 'dark' ? 'bg-gray-800 text-gray-300 hover:bg-gray-700' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                {category}
              </button>
            ))}
          </div>


          {viewMode === 'grid' ? (
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 sm:gap-8">
              {filteredChannels.map((channel, index) => {
                const isInWatchlist = watchlist.includes(channel.name);
                const description = CHANNEL_DESCRIPTIONS[channel.name];


                return (
                  <div
                    key={index}
                    className={`group relative ${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white border border-gray-200'} rounded-lg overflow-hidden hover:ring-2 hover:ring-blue-500 transition-all`}
                  >
                    <div className="absolute top-2 sm:top-3 left-2 sm:left-3 bg-blue-600 text-white text-xs sm:text-sm lg:text-base font-bold px-2 sm:px-3 py-1 sm:py-2 rounded z-10">
                      CH {channel.channelNumber}
                    </div>
                    <button
                      onClick={() => toggleWatchlist(channel)}
                      className={`absolute top-2 sm:top-3 right-2 sm:right-3 p-2 sm:p-3 rounded-full transition-colors ${
                        isInWatchlist ? 'bg-green-600 text-white' : effectiveTheme === 'dark' ? 'bg-black/50 hover:bg-black/70' : 'bg-gray-200 hover:bg-gray-300'
                      }`}
                    >
                      {isInWatchlist ? <Check className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" /> : <Plus className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" />}
                    </button>


                    <button
                      onClick={() => onPlay(0, 'live', undefined, undefined, channel.embed, channel.name)}
                      className="w-full"
                    >
                      <div className={`aspect-video ${effectiveTheme === 'dark' ? 'bg-gradient-to-br from-gray-800 to-gray-900' : 'bg-gradient-to-br from-gray-100 to-gray-200'} flex items-center justify-center p-4 sm:p-8`}>
                        <h3 className={`text-base sm:text-2xl lg:text-3xl font-bold text-center ${textClass}`}>
                          {channel.name}
                        </h3>
                      </div>
                      <div className="p-3 sm:p-6">
                        {description && (
                          <p className={`text-xs sm:text-sm lg:text-base ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-2 sm:mb-3 line-clamp-2`}>{description}</p>
                        )}
                        <span className={`inline-block px-2 sm:px-3 py-1 sm:py-2 text-xs sm:text-sm lg:text-base ${effectiveTheme === 'dark' ? 'bg-gray-800 text-gray-300' : 'bg-gray-200 text-gray-700'} rounded`}>
                          {channel.category}
                        </span>
                      </div>
                    </button>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="space-y-4 sm:space-y-6">
              {filteredChannels.map((channel, index) => {
                const isInWatchlist = watchlist.includes(channel.name);
                const description = CHANNEL_DESCRIPTIONS[channel.name];


                return (
                  <div
                    key={index}
                    className={`group ${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white border border-gray-200'} rounded-lg overflow-hidden hover:ring-2 hover:ring-blue-500 transition-all`}
                  >
                    <button
                      onClick={() => onPlay(0, 'live', undefined, undefined, channel.embed, channel.name)}
                      className="w-full flex flex-col sm:flex-row items-center gap-4 sm:gap-8 p-4 sm:p-6 lg:p-8"
                    >
                      <div className="flex-shrink-0 flex flex-col items-center">
                        <div className="bg-blue-600 text-white text-sm sm:text-base lg:text-lg font-bold px-3 sm:px-4 py-1 sm:py-2 rounded mb-2 sm:mb-3">
                          CH {channel.channelNumber}
                        </div>
                        <div className={`w-40 h-24 sm:w-52 sm:h-32 ${effectiveTheme === 'dark' ? 'bg-gradient-to-br from-gray-800 to-gray-900' : 'bg-gradient-to-br from-gray-100 to-gray-200'} rounded flex items-center justify-center p-3 sm:p-4`}>
                          <span className={`text-base sm:text-lg lg:text-xl font-bold text-center ${textClass}`}>{channel.name}</span>
                        </div>
                      </div>
                      <div className="flex-1 text-center sm:text-left w-full">
                        <h3 className={`font-bold text-xl sm:text-3xl lg:text-4xl mb-2 sm:mb-3 group-hover:text-blue-400 transition-colors ${textClass}`}>
                          {channel.name}
                        </h3>
                        {description && (
                          <p className={`text-sm sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-2 sm:mb-3`}>{description}</p>
                        )}
                        <span className={`inline-block px-3 sm:px-4 py-1 sm:py-2 text-sm sm:text-base lg:text-lg ${effectiveTheme === 'dark' ? 'bg-gray-800 text-gray-300' : 'bg-gray-200 text-gray-700'} rounded`}>
                          {channel.category}
                        </span>
                      </div>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleWatchlist(channel);
                        }}
                        className={`flex-shrink-0 p-3 sm:p-4 rounded-full transition-colors ${
                          isInWatchlist ? 'bg-green-600 text-white' : effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700' : 'bg-gray-200 hover:bg-gray-300'
                        }`}
                      >
                        {isInWatchlist ? <Check className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8" /> : <Plus className="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8" />}
                      </button>
                    </button>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


PlayerView.tsx:
import { useState, useEffect } from 'react';
import { ArrowLeft, ChevronLeft, ChevronRight, Plus, Check } from 'lucide-react';
import { Profile, TMDBDetail, Episode, LiveChannel } from '../types';
import { tmdbFetch, EMBED_PROVIDERS } from '../lib/tmdb';
import { saveWatchHistory as saveHistory, generateId, getWatchlist, addToWatchlist, removeFromWatchlist } from '../lib/storage';
import { useTheme } from '../context/ThemeContext';
import { LIVE_CHANNELS } from '../lib/liveChannels';


interface PlayerViewProps {
  profile: Profile;
  tmdbId: number;
  mediaType: 'movie' | 'tv' | 'live';
  season?: number;
  episode?: number;
  embedUrl?: string;
  channelName?: string;
  onBack: () => void;
  onPlay: (tmdbId: number, mediaType: 'movie' | 'tv' | 'live', season?: number, episode?: number, embedUrl?: string, channelName?: string) => void;
}


export function PlayerView({
  profile,
  tmdbId,
  mediaType,
  season = 1,
  episode = 1,
  embedUrl,
  channelName,
  onBack,
  onPlay: onPlayProp
}: PlayerViewProps) {
  const [detail, setDetail] = useState<TMDBDetail | null>(null);
  const [currentSeason, setCurrentSeason] = useState(season);
  const [currentEpisode, setCurrentEpisode] = useState(episode);
  const [episodes, setEpisodes] = useState<Episode[]>([]);
  const [server, setServer] = useState<'vidsrc' | 'vidlink' | '111movies' | 'videasy' | 'vidfast'>('111movies');
  const [playerUrl, setPlayerUrl] = useState('');
  const [watchlist, setWatchlist] = useState<string[]>([]);
  const { effectiveTheme } = useTheme();


  const currentChannel = mediaType === 'live' ? LIVE_CHANNELS.find(ch => ch.name === channelName) : null;
  const currentChannelIndex = currentChannel ? LIVE_CHANNELS.findIndex(ch => ch.channelNumber === currentChannel.channelNumber) : -1;
  const similarChannels = currentChannel ? LIVE_CHANNELS.filter(ch => ch.category === currentChannel.category && ch.channelNumber !== currentChannel.channelNumber).slice(0, 6) : [];


  useEffect(() => {
    if (mediaType !== 'live') {
      loadDetail();
    } else {
      loadWatchlist();
    }
    updatePlayerUrl();
  }, [tmdbId, mediaType]);


  useEffect(() => {
    if (mediaType === 'tv') {
      loadEpisodes();
    }
    updatePlayerUrl();
  }, [currentSeason, currentEpisode, server]);


  useEffect(() => {
    if (detail) {
      saveWatchHistory();
    }
  }, [currentSeason, currentEpisode, detail]);


  function loadWatchlist() {
    try {
      const list = getWatchlist(profile.id).filter(item => item.media_type === 'live');
      setWatchlist(list.map(item => item.title));
    } catch (error) {
      console.error('Error loading watchlist:', error);
    }
  }


  function toggleWatchlist(channel: LiveChannel) {
    const isInWatchlist = watchlist.includes(channel.name);


    try {
      if (isInWatchlist) {
        const list = getWatchlist(profile.id);
        const item = list.find(w => w.title === channel.name && w.media_type === 'live');
        if (item?.tmdb_id !== undefined) {
          removeFromWatchlist(profile.id, item.tmdb_id);
        }
        setWatchlist(watchlist.filter(name => name !== channel.name));
      } else {
        addToWatchlist({
          id: generateId(),
          profile_id: profile.id,
          tmdb_id: undefined,
          media_type: 'live',
          title: channel.name,
          poster_path: undefined,
          embed_url: channel.embed,
          created_at: new Date().toISOString()
        });
        setWatchlist([...watchlist, channel.name]);
      }
    } catch (error) {
      console.error('Error toggling watchlist:', error);
    }
  }


  function handlePreviousChannel() {
    if (currentChannelIndex > 0) {
      const prevChannel = LIVE_CHANNELS[currentChannelIndex - 1];
      onPlayProp(0, 'live', undefined, undefined, prevChannel.embed, prevChannel.name);
    }
  }


  function handleNextChannel() {
    if (currentChannelIndex < LIVE_CHANNELS.length - 1) {
      const nextChannel = LIVE_CHANNELS[currentChannelIndex + 1];
      onPlayProp(0, 'live', undefined, undefined, nextChannel.embed, nextChannel.name);
    }
  }


  function handlePlayChannel(channel: LiveChannel) {
    onPlayProp(0, 'live', undefined, undefined, channel.embed, channel.name);
  }


  async function loadDetail() {
    try {
      const data = await tmdbFetch(`/${mediaType}/${tmdbId}`);
      setDetail(data);
    } catch (error) {
      console.error('Error loading detail:', error);
    }
  }


  async function loadEpisodes() {
    try {
      const data = await tmdbFetch(`/tv/${tmdbId}/season/${currentSeason}`);
      setEpisodes(data.episodes || []);
    } catch (error) {
      console.error('Error loading episodes:', error);
    }
  }


  function updatePlayerUrl() {
    if (mediaType === 'live' && embedUrl) {
      setPlayerUrl(embedUrl);
    } else {
      const url = EMBED_PROVIDERS[server](mediaType, tmdbId, currentSeason, currentEpisode);
      setPlayerUrl(url);
    }
  }


  function saveWatchHistory() {
    if (mediaType === 'live') return;


    try {
      saveHistory({
        id: generateId(),
        profile_id: profile.id,
        tmdb_id: tmdbId,
        media_type: mediaType,
        title: detail?.title || detail?.name || '',
        poster_path: detail?.poster_path || undefined,
        season: mediaType === 'tv' ? currentSeason : undefined,
        episode: mediaType === 'tv' ? currentEpisode : undefined,
        position: 0,
        duration: 0,
        last_watched: new Date().toISOString(),
        created_at: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error saving watch history:', error);
    }
  }


  function handlePreviousEpisode() {
    if (currentEpisode > 1) {
      setCurrentEpisode(currentEpisode - 1);
    } else if (currentSeason > 1) {
      setCurrentSeason(currentSeason - 1);
      setCurrentEpisode(999);
    }
  }


  function handleNextEpisode() {
    if (currentEpisode < episodes.length) {
      setCurrentEpisode(currentEpisode + 1);
    } else if (detail?.number_of_seasons && currentSeason < detail.number_of_seasons) {
      setCurrentSeason(currentSeason + 1);
      setCurrentEpisode(1);
    }
  }


  const title = channelName || detail?.title || detail?.name || 'Player';
  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <div className={`fixed top-0 left-0 right-0 z-50 ${effectiveTheme === 'dark' ? 'bg-black/95' : 'bg-white/95'} backdrop-blur-sm`}>
        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto px-4 sm:px-8 py-4 sm:py-6">
          <div className="flex items-center justify-between gap-2 sm:gap-4 mb-3 sm:mb-0">
            <button
              onClick={onBack}
              className={`flex items-center gap-2 sm:gap-3 ${textClass} hover:text-blue-400 transition-colors flex-shrink-0`}
            >
              <ArrowLeft className="w-6 h-6 sm:w-8 sm:h-8 lg:w-10 lg:h-10" />
              <span className="font-medium text-base sm:text-xl lg:text-2xl">Back</span>
            </button>
            <div className="flex items-center gap-2 sm:gap-6 min-w-0">
              <h2 className={`text-base sm:text-2xl lg:text-4xl font-bold ${textClass} truncate`}>{title}</h2>
              {mediaType === 'tv' && (
                <span className={`text-sm sm:text-xl lg:text-2xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} whitespace-nowrap`}>S{currentSeason}:E{currentEpisode}</span>
              )}
            </div>
          </div>
          <div className="flex items-center justify-end gap-2 sm:gap-4">
            {mediaType !== 'live' && (
              <select
                value={server}
                onChange={(e) => setServer(e.target.value as any)}
                className={`px-3 sm:px-6 py-2 sm:py-4 text-sm sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700 text-white' : 'bg-gray-200 border-gray-300 text-black'} rounded border focus:outline-none focus:border-blue-500`}
              >
                <option value="111movies">111Movies</option>
                <option value="vidsrc">Vidsrc</option>
                <option value="vidlink">Vidlink</option>
                <option value="videasy">Videasy</option>
                <option value="vidfast">Vidfast</option>
              </select>
            )}
          </div>
        </div>
      </div>


      <div className="pt-32 sm:pt-40 lg:pt-32 px-4 sm:px-8">
        <div className="max-w-[90%] 4xl:max-w-[2400px] mx-auto">
          {mediaType === 'live' && (
            <div className={`text-center mb-4 sm:mb-6 ${effectiveTheme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'} font-medium text-sm sm:text-xl lg:text-2xl`}>
              Live TV Channel might take up to 35 seconds to load
            </div>
          )}
          {mediaType === 'live' ? (
            <div
              className="bg-black rounded-lg mb-6 sm:mb-8"
              style={{
                minHeight: '300px',
                height: '60vh',
                border: '3px solid #1a73e8',
                boxShadow: '0 0 20px #1a73e8aa'
              }}
            >
              <iframe
                src={playerUrl}
                width="100%"
                height="100%"
                style={{ border: 0, display: 'block' }}
                allowFullScreen
                title={`Live TV - ${channelName}`}
              />
            </div>
          ) : (
            <div className="bg-black rounded-lg overflow-hidden mb-6 sm:mb-8 shadow-2xl" style={{ minHeight: '300px', height: '60vh' }}>
              <iframe
                src={playerUrl}
                width="100%"
                height="100%"
                style={{ border: 0 }}
                allowFullScreen
                title="Video Player"
              />
            </div>
          )}


          {mediaType === 'live' && currentChannel && (
            <div className="mb-6 sm:mb-8">
              <div className="flex flex-col sm:flex-row items-center justify-center gap-3 sm:gap-6 mb-6 sm:mb-8">
                <button
                  onClick={handlePreviousChannel}
                  disabled={currentChannelIndex === 0}
                  className={`w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 disabled:bg-gray-900 disabled:text-gray-600' : 'bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400'} rounded-lg font-medium transition-colors flex items-center justify-center gap-2 sm:gap-3`}
                >
                  <ChevronLeft className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" />
                  <span className="hidden sm:inline">Previous Channel</span>
                  <span className="sm:hidden">Previous</span>
                </button>
                <button
                  onClick={() => toggleWatchlist(currentChannel)}
                  className={`w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg lg:text-xl rounded-lg font-medium transition-colors flex items-center justify-center gap-2 sm:gap-3 ${
                    watchlist.includes(currentChannel.name)
                      ? 'bg-green-600 hover:bg-green-700 text-white'
                      : effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 text-white' : 'bg-gray-200 hover:bg-gray-300 text-black'
                  }`}
                >
                  {watchlist.includes(currentChannel.name) ? <Check className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" /> : <Plus className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" />}
                  {watchlist.includes(currentChannel.name) ? 'In Library' : 'Add to Library'}
                </button>
                <button
                  onClick={handleNextChannel}
                  disabled={currentChannelIndex === LIVE_CHANNELS.length - 1}
                  className={`w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 disabled:bg-gray-900 disabled:text-gray-600' : 'bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400'} rounded-lg font-medium transition-colors flex items-center justify-center gap-2 sm:gap-3`}
                >
                  <span className="hidden sm:inline">Next Channel</span>
                  <span className="sm:hidden">Next</span>
                  <ChevronRight className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" />
                </button>
              </div>


              {similarChannels.length > 0 && (
                <div>
                  <h3 className={`text-2xl sm:text-3xl lg:text-4xl font-bold mb-4 sm:mb-6 ${textClass}`}>Similar Channels</h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-6">
                    {similarChannels.map((channel) => (
                      <button
                        key={channel.channelNumber}
                        onClick={() => handlePlayChannel(channel)}
                        className={`group ${effectiveTheme === 'dark' ? 'bg-gray-900 hover:bg-gray-800' : 'bg-white hover:bg-gray-50 border border-gray-200'} rounded-lg p-3 sm:p-6 transition-all hover:ring-2 hover:ring-blue-500`}
                      >
                        <div className="mb-2 sm:mb-3">
                          <span className="inline-block bg-blue-600 text-white text-xs sm:text-sm lg:text-base font-bold px-2 sm:px-3 py-1 sm:py-2 rounded">
                            CH {channel.channelNumber}
                          </span>
                        </div>
                        <div className={`aspect-video ${effectiveTheme === 'dark' ? 'bg-gradient-to-br from-gray-800 to-gray-900' : 'bg-gradient-to-br from-gray-100 to-gray-200'} rounded flex items-center justify-center p-2 sm:p-4 mb-2 sm:mb-3`}>
                          <span className={`text-xs sm:text-base lg:text-lg font-bold text-center ${textClass}`}>{channel.name}</span>
                        </div>
                        <p className={`text-xs sm:text-sm lg:text-base ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} text-center`}>{channel.category}</p>
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}


          {mediaType === 'tv' && (
            <div className="flex flex-col sm:flex-row items-center justify-between gap-3 sm:gap-4 mb-6 sm:mb-8">
              <button
                onClick={handlePreviousEpisode}
                disabled={currentSeason === 1 && currentEpisode === 1}
                className={`w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 disabled:bg-gray-900 disabled:text-gray-600' : 'bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400'} rounded font-medium transition-colors flex items-center justify-center gap-2 sm:gap-3`}
              >
                <ChevronLeft className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" />
                <span className="hidden sm:inline">Previous Episode</span>
                <span className="sm:hidden">Previous</span>
              </button>
              <button
                onClick={handleNextEpisode}
                disabled={currentSeason === detail?.number_of_seasons && currentEpisode === episodes.length}
                className={`w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 disabled:bg-gray-900 disabled:text-gray-600' : 'bg-gray-200 hover:bg-gray-300 disabled:bg-gray-100 disabled:text-gray-400'} rounded font-medium transition-colors flex items-center justify-center gap-2 sm:gap-3`}
              >
                <span className="hidden sm:inline">Next Episode</span>
                <span className="sm:hidden">Next</span>
                <ChevronRight className="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7" />
              </button>
            </div>
          )}


          {mediaType === 'tv' && episodes.length > 0 && (
            <div>
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 sm:gap-4 mb-4 sm:mb-6">
                <h3 className={`text-2xl sm:text-3xl lg:text-4xl font-bold ${textClass}`}>Episodes</h3>
                <select
                  value={currentSeason}
                  onChange={(e) => setCurrentSeason(parseInt(e.target.value))}
                  className={`w-full sm:w-auto px-4 sm:px-6 py-3 sm:py-4 text-base sm:text-lg lg:text-xl ${effectiveTheme === 'dark' ? 'bg-gray-800 border-gray-700 text-white' : 'bg-gray-200 border-gray-300 text-black'} rounded border focus:outline-none focus:border-blue-500`}
                >
                  {detail?.number_of_seasons && Array.from({ length: detail.number_of_seasons }, (_, i) => i + 1).map((s) => (
                    <option key={s} value={s}>
                      Season {s}
                    </option>
                  ))}
                </select>
              </div>


              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6">
                {episodes.map((ep) => (
                  <button
                    key={ep.id}
                    onClick={() => setCurrentEpisode(ep.episode_number)}
                    className={`text-left p-6 rounded-lg transition-all ${
                      currentEpisode === ep.episode_number
                        ? 'bg-blue-600 shadow-lg text-white'
                        : effectiveTheme === 'dark' ? 'bg-gray-800 hover:bg-gray-700' : 'bg-gray-200 hover:bg-gray-300'
                    }`}
                  >
                    <div className="flex gap-4">
                      <div className="flex-shrink-0 w-40 h-24 bg-gray-900 rounded overflow-hidden">
                        {ep.still_path && (
                          <img
                            src={`https://image.tmdb.org/t/p/w300${ep.still_path}`}
                            alt={ep.name}
                            className="w-full h-full object-cover"
                          />
                        )}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className={`font-bold text-lg lg:text-xl mb-2 ${currentEpisode === ep.episode_number ? 'text-white' : textClass}`}>{ep.episode_number}. {ep.name}</div>
                        <p className={`text-base lg:text-lg ${currentEpisode === ep.episode_number ? 'text-gray-200' : effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'} line-clamp-2`}>{ep.overview}</p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


PopupAd.tsx:
import { X, Heart, Gift } from 'lucide-react';


interface PopupAdProps {
  onClose: () => void;
  onDonate: () => void;
  theme: 'light' | 'dark';
}


export function PopupAd({ onClose, onDonate, theme }: PopupAdProps) {
  return (
    <div className="fixed inset-0 z-[200] flex items-center justify-center bg-black/70 backdrop-blur-sm animate-fade-in">
      <div className={`relative max-w-md 4k:max-w-4xl w-full mx-4 4k:mx-8 ${theme === 'dark' ? 'bg-gradient-to-br from-purple-900 to-blue-900' : 'bg-gradient-to-br from-purple-100 to-blue-100'} rounded-2xl 4k:rounded-[3rem] shadow-2xl p-8 4k:p-16 animate-scale-in border-4 4k:border-8 ${theme === 'dark' ? 'border-purple-500' : 'border-purple-400'}`}>
        <button
          onClick={onClose}
          className={`absolute top-4 right-4 4k:top-8 4k:right-8 p-2 4k:p-4 ${theme === 'dark' ? 'hover:bg-white/20' : 'hover:bg-black/10'} rounded-full transition-colors`}
        >
          <X size={24} className={`${theme === 'dark' ? 'text-white' : 'text-gray-800'} 4k:w-12 4k:h-12`} />
        </button>


        <div className="text-center">
          <div className="mb-4 4k:mb-8 flex justify-center">
            <div className={`p-4 4k:p-8 ${theme === 'dark' ? 'bg-white/10' : 'bg-white/50'} rounded-full`}>
              <Heart size={48} className={`${theme === 'dark' ? 'text-pink-400' : 'text-pink-600'} animate-pulse 4k:w-32 4k:h-32`} />
            </div>
          </div>


          <h2 className={`text-3xl 4k:text-7xl font-bold mb-4 4k:mb-8 ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
            Enjoying SimplStream?
          </h2>


          <p className={`text-lg 4k:text-4xl mb-6 4k:mb-12 ${theme === 'dark' ? 'text-gray-200' : 'text-gray-700'}`}>
            Help keep SimplStream free for everyone! Your support helps us maintain and improve the service.
          </p>


          <button
            onClick={onDonate}
            className={`w-full px-8 py-4 4k:px-16 4k:py-8 ${theme === 'dark' ? 'bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700' : 'bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600'} text-white rounded-lg 4k:rounded-3xl font-bold text-lg 4k:text-4xl transition-all flex items-center justify-center gap-2 4k:gap-4 shadow-lg mb-4 4k:mb-8`}
          >
            <Gift size={24} className="4k:w-12 4k:h-12" />
            Support SimplStream
          </button>


          <button
            onClick={onClose}
            className={`text-sm 4k:text-3xl ${theme === 'dark' ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-800'} transition-colors`}
          >
            Maybe later
          </button>
        </div>
      </div>


      <style>{`
        @keyframes fade-in {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }
        @keyframes scale-in {
          from {
            transform: scale(0.9);
            opacity: 0;
          }
          to {
            transform: scale(1);
            opacity: 1;
          }
        }
        .animate-fade-in {
          animation: fade-in 0.3s ease-out forwards;
        }
        .animate-scale-in {
          animation: scale-in 0.3s ease-out forwards;
        }
      `}</style>
    </div>
  );
}


ProfileSelector.tsx:
import { useState, useEffect } from 'react';
import { Plus, X } from 'lucide-react';
import { Profile } from '../types';
import { getProfiles, saveProfile, generateId } from '../lib/storage';


interface ProfileSelectorProps {
  onSelectProfile: (profile: Profile) => void;
}


const AVATAR_COLORS = [
  '#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6',
  '#EC4899', '#14B8A6', '#F97316', '#6366F1', '#84CC16',
  '#06B6D4', '#F43F5E', '#22C55E', '#EAB308', '#A855F7',
  '#EC407A'
];


export function ProfileSelector({ onSelectProfile }: ProfileSelectorProps) {
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [isCreating, setIsCreating] = useState(false);
  const [newProfileName, setNewProfileName] = useState('');
  const [newProfileColor, setNewProfileColor] = useState(AVATAR_COLORS[0]);
  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);
  const [pinInput, setPinInput] = useState('');
  const [pinError, setPinError] = useState(false);
  const [showForgotPin, setShowForgotPin] = useState(false);
  const [securityWordInput, setSecurityWordInput] = useState('');


  useEffect(() => {
    loadProfiles();
  }, []);


  function loadProfiles() {
    const loadedProfiles = getProfiles();
    setProfiles(loadedProfiles);
  }


  function createProfile() {
    if (!newProfileName.trim()) return;


    const newProfile: Profile = {
      id: generateId(),
      name: newProfileName.trim(),
      avatar_color: newProfileColor,
      created_at: new Date().toISOString()
    };


    saveProfile(newProfile);
    setProfiles([...profiles, newProfile]);
    setNewProfileName('');
    setNewProfileColor(AVATAR_COLORS[0]);
    setIsCreating(false);
    showAlert('Profile created successfully!');
  }


  function handleProfileClick(profile: Profile) {
    if (profile.pin) {
      setSelectedProfile(profile);
      setPinInput('');
      setPinError(false);
      setShowForgotPin(false);
    } else {
      onSelectProfile(profile);
    }
  }


  function handlePinSubmit() {
    if (!selectedProfile) return;


    if (pinInput === selectedProfile.pin) {
      onSelectProfile(selectedProfile);
    } else {
      setPinError(true);
      setShowForgotPin(true);
    }
  }


  function handleForgotPin() {
    if (!selectedProfile || !securityWordInput) return;


    if (securityWordInput === selectedProfile.security_word) {
      showAlert(`Your passcode is: ${selectedProfile.pin}`);
      setShowForgotPin(false);
      setSecurityWordInput('');
    } else {
      showAlert('Invalid security word. You are locked out forever if you forgot both!');
    }
  }


  function showAlert(message: string) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'fixed top-4 right-4 z-[100] bg-green-600 text-white px-6 py-3 rounded-lg shadow-2xl animate-fade-in';
    alertDiv.textContent = message;
    document.body.appendChild(alertDiv);
    setTimeout(() => {
      alertDiv.remove();
    }, 2000);
  }


  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-950 via-blue-900 to-black flex items-center justify-center p-8 relative overflow-hidden">
      <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-blue-400/20 via-transparent to-transparent"></div>


      {selectedProfile && selectedProfile.pin ? (
        <div className="relative z-10 bg-black/40 backdrop-blur-lg p-8 rounded-xl border border-white/10 max-w-md w-full">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-white">Enter Passcode for {selectedProfile.name}</h2>
            <button
              onClick={() => setSelectedProfile(null)}
              className="text-gray-400 hover:text-white"
            >
              <X size={24} />
            </button>
          </div>


          <input
            type="password"
            maxLength={4}
            value={pinInput}
            onChange={(e) => {
              const value = e.target.value.replace(/\D/g, '');
              setPinInput(value);
              setPinError(false);
            }}
            onKeyDown={(e) => e.key === 'Enter' && handlePinSubmit()}
            placeholder="Enter 4-digit passcode"
            className={`w-full px-4 py-3 rounded-lg bg-gray-900/50 border ${
              pinError ? 'border-red-500' : 'border-gray-700'
            } text-white text-center text-2xl tracking-widest placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4`}
            autoFocus
          />


          {pinError && (
            <p className="text-red-500 text-sm mb-2">Incorrect passcode. Please try again.</p>
          )}


          <button
            onClick={handlePinSubmit}
            className="w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors mb-4"
          >
            Submit
          </button>


          {showForgotPin && (
            <div className="mt-6 p-4 bg-gray-900/50 rounded-lg border border-gray-700">
              <h3 className="text-lg font-bold text-white mb-4">Forgot Passcode?</h3>
              <p className="text-gray-300 text-sm mb-3">
                Enter your security word to reveal your passcode. If you forgot your security word, you are locked out forever!
              </p>
              <input
                type="text"
                value={securityWordInput}
                onChange={(e) => setSecurityWordInput(e.target.value)}
                placeholder="Enter security word"
                className="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-3"
              />
              <button
                onClick={handleForgotPin}
                className="w-full px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors"
              >
                Recover Passcode
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="relative z-10 text-center">
          <h1 className="text-5xl font-bold text-white mb-12">Who's watching?</h1>


          <div className="flex flex-wrap justify-center gap-8 max-w-4xl">
            {profiles.map((profile) => (
              <button
                key={profile.id}
                onClick={() => handleProfileClick(profile)}
                className="flex flex-col items-center gap-4 group cursor-pointer transition-transform hover:scale-110"
              >
                <div
                  className="w-32 h-32 rounded-lg flex items-center justify-center text-white text-3xl font-bold shadow-2xl group-hover:shadow-blue-500/50 transition-all border-4 border-transparent group-hover:border-white"
                  style={{ backgroundColor: profile.avatar_color }}
                >
                  {profile.name.charAt(0).toUpperCase()}
                </div>
                <span className="text-white text-xl font-medium group-hover:text-blue-300 transition-colors">
                  {profile.name}
                </span>
              </button>
            ))}


            {!isCreating && (
              <button
                onClick={() => setIsCreating(true)}
                className="flex flex-col items-center gap-4 group cursor-pointer transition-transform hover:scale-110"
              >
                <div className="w-32 h-32 rounded-lg flex items-center justify-center bg-gray-800/50 backdrop-blur-sm text-white shadow-2xl group-hover:shadow-blue-500/50 transition-all border-4 border-dashed border-gray-600 group-hover:border-white">
                  <Plus size={48} />
                </div>
                <span className="text-white text-xl font-medium group-hover:text-blue-300 transition-colors">
                  Add Profile
                </span>
              </button>
            )}
          </div>


          {isCreating && (
            <div className="mt-12 max-w-md mx-auto bg-black/40 backdrop-blur-lg p-8 rounded-xl border border-white/10">
              <h2 className="text-2xl font-bold text-white mb-4">Create Profile</h2>
              <input
                type="text"
                value={newProfileName}
                onChange={(e) => setNewProfileName(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && createProfile()}
                placeholder="Enter profile name"
                className="w-full px-4 py-3 rounded-lg bg-gray-900/50 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 mb-4"
                autoFocus
              />
              <div className="mb-4">
                <label className="text-white text-sm mb-2 block">Choose Profile Color</label>
                <div className="grid grid-cols-8 gap-2 mb-3">
                  {AVATAR_COLORS.map((color, index) => (
                    <button
                      key={index}
                      onClick={() => setNewProfileColor(color)}
                      className={`w-10 h-10 rounded-lg transition-all ${newProfileColor === color ? 'ring-4 ring-white scale-110' : 'hover:scale-105'}`}
                      style={{ backgroundColor: color }}
                    />
                  ))}
                </div>
                <div className="flex items-center gap-2">
                  <input
                    type="color"
                    value={newProfileColor}
                    onChange={(e) => setNewProfileColor(e.target.value)}
                    className="w-12 h-12 rounded-lg cursor-pointer border-2 border-gray-700"
                  />
                  <span className="text-gray-400 text-sm">Or pick a custom color</span>
                </div>
              </div>
              <div className="flex gap-4">
                <button
                  onClick={createProfile}
                  className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
                >
                  Create
                </button>
                <button
                  onClick={() => {
                    setIsCreating(false);
                    setNewProfileName('');
                    setNewProfileColor(AVATAR_COLORS[0]);
                  }}
                  className="flex-1 px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}


StartupAnimation.tsx:
import { useEffect, useState, useRef } from 'react';


interface StartupAnimationProps {
  onComplete: () => void;
}


export function StartupAnimation({ onComplete }: StartupAnimationProps) {
  const [stage, setStage] = useState<'simpl' | 'stream' | 'full' | 'slogan' | 'final' | 'fade'>('simpl');
  const audioRef = useRef<HTMLAudioElement | null>(null);


  useEffect(() => {
    audioRef.current = new Audio('https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3');
    audioRef.current.play().catch(e => console.log('Audio autoplay prevented'));


    const timer1 = setTimeout(() => setStage('stream'), 1000);
    const timer2 = setTimeout(() => setStage('full'), 2400);
    const timer3 = setTimeout(() => setStage('slogan'), 3400);
    const timer4 = setTimeout(() => setStage('final'), 4400);
    const timer5 = setTimeout(() => setStage('fade'), 5700);
    const timer6 = setTimeout(() => onComplete(), 6000);


    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
      clearTimeout(timer3);
      clearTimeout(timer4);
      clearTimeout(timer5);
      clearTimeout(timer6);
      if (audioRef.current) {
        audioRef.current.pause();
      }
    };
  }, [onComplete]);


  return (
    <div
      className={`fixed inset-0 z-[9999] flex items-center justify-center bg-white transition-opacity duration-500 overflow-hidden ${
        stage === 'fade' ? 'opacity-0' : 'opacity-100'
      }`}
    >
      {(stage === 'final' || stage === 'fade') && (
        <div className="absolute inset-0 overflow-hidden">
          {[...Array(12)].map((_, i) => (
            <div
              key={i}
              className="absolute animate-fall-and-turn"
              style={{
                left: `${(i * 8.33) + Math.random() * 5}%`,
                top: '-10%',
                animationDelay: `${i * 0.15}s`,
                animationDuration: '1.8s',
              }}
            >
              <div
                className="w-2 h-96 rounded-full blur-md opacity-80"
                style={{
                  background: ['#3B82F6', '#EF4444', '#F97316', '#8B5CF6', '#10B981'][i % 5],
                  boxShadow: `0 0 40px ${['#3B82F6', '#EF4444', '#F97316', '#8B5CF6', '#10B981'][i % 5]}`,
                }}
              />
            </div>
          ))}
        </div>
      )}


      <div className="text-center relative z-10">
        {stage === 'simpl' && (
          <div className="animate-scale-in">
            <h1 className="text-6xl md:text-8xl 4k:text-[12rem] font-bold text-blue-500 drop-shadow-2xl">
              Simpl
            </h1>
          </div>
        )}


        {stage === 'stream' && (
          <div className="animate-scale-in bg-white px-8 py-4 4k:px-16 4k:py-8 rounded-xl 4k:rounded-3xl">
            <h1 className="text-6xl md:text-8xl 4k:text-[12rem] font-bold text-black drop-shadow-lg">
              Stream
            </h1>
          </div>
        )}


        {(stage === 'full' || stage === 'slogan' || stage === 'final' || stage === 'fade') && (
          <div className="animate-scale-in">
            <h1 className="text-6xl md:text-8xl 4k:text-[12rem] font-bold drop-shadow-2xl">
              <span className="text-blue-500">Simpl</span>
              <span className="text-black">Stream</span>
            </h1>
            {(stage === 'slogan' || stage === 'final' || stage === 'fade') && (
              <p className="text-xl md:text-2xl 4k:text-6xl text-gray-600 mt-4 4k:mt-8 animate-fade-in-slow font-medium">
                It's not just streaming, it's SimplStream
              </p>
            )}
          </div>
        )}
      </div>


      <style>{`
        @keyframes scale-in {
          from {
            transform: scale(0.8);
            opacity: 0;
          }
          to {
            transform: scale(1);
            opacity: 1;
          }
        }


        @keyframes fade-in-slow {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }


        @keyframes fall-and-turn {
          0% {
            transform: translateY(0) rotate(0deg);
            opacity: 0;
          }
          10% {
            opacity: 1;
          }
          70% {
            transform: translateY(70vh) rotate(0deg);
            opacity: 1;
          }
          100% {
            transform: translateY(70vh) rotate(90deg);
            opacity: 0;
          }
        }


        .animate-scale-in {
          animation: scale-in 0.6s ease-out forwards;
        }


        .animate-fade-in-slow {
          animation: fade-in-slow 1s ease-out forwards;
        }


        .animate-fall-and-turn {
          animation: fall-and-turn 1.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
      `}</style>
    </div>
  );
}


SurpriseMeView.tsx:
import { useState, useEffect, useRef } from 'react';
import { ArrowLeft, Play, Plus, Info, X, Film } from 'lucide-react';
import { Profile } from '../types';
import { generateRecommendations } from '../lib/recommendations';
import { getTMDBImageUrl } from '../lib/tmdb';
import { addToWatchlist, isInWatchlist } from '../lib/storage';
import { useTheme } from '../context/ThemeContext';


interface SurpriseMeViewProps {
  profile: Profile;
  onBack: () => void;
  onShowDetail: (id: number, type: 'movie' | 'tv') => void;
}


export function SurpriseMeView({ profile, onBack, onShowDetail }: SurpriseMeViewProps) {
  const [recommendations, setRecommendations] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [hero, setHero] = useState<any | null>(null);
  const { effectiveTheme } = useTheme();


  useEffect(() => {
    loadRecommendations();
  }, [profile.id]);


  async function loadRecommendations() {
    setLoading(true);
    try {
      const recs = await generateRecommendations(profile);
      setRecommendations(recs);
      if (recs.length > 0) {
        setHero(recs[0]);
      }
    } catch (error) {
      console.error('Error loading recommendations:', error);
    } finally {
      setLoading(false);
    }
  }


  function handleAddToWatchlist(item: any) {
    const watchlistItem = {
      id: `${Date.now()}`,
      profile_id: profile.id,
      tmdb_id: item.id,
      media_type: item.media_type,
      title: item.title || item.name,
      poster_path: item.poster_path || undefined,
      created_at: new Date().toISOString()
    };
    addToWatchlist(watchlistItem);
    showAlert('Added to My List!');
  }


  function showAlert(message: string) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `fixed top-20 left-1/2 -translate-x-1/2 z-[100] ${effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} ${effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900'} px-8 py-4 rounded-xl shadow-2xl border-2 ${effectiveTheme === 'dark' ? 'border-blue-500' : 'border-blue-600'} font-semibold text-base backdrop-blur-lg`;
    alertDiv.textContent = message;
    document.body.appendChild(alertDiv);
    setTimeout(() => {
      alertDiv.style.transition = 'opacity 0.3s ease';
      alertDiv.style.opacity = '0';
      setTimeout(() => alertDiv.remove(), 300);
    }, 2000);
  }


  const getTitle = (item: any) => item.title || item.name;
  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';


  if (loading) {
    return (
      <div className={`min-h-screen ${bgClass} ${textClass} flex items-center justify-center`}>
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
          <p className="text-xl">Generating recommendations...</p>
        </div>
      </div>
    );
  }


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <button
        onClick={onBack}
        className="fixed bottom-6 left-6 z-50 px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-full font-bold transition-all shadow-2xl flex items-center gap-2 text-base md:text-lg"
      >
        <ArrowLeft size={20} />
        Return to Normal
      </button>


      {hero && (
        <div className="relative h-[70vh] md:h-[85vh] overflow-hidden">
          <div
            className="absolute inset-0 bg-cover bg-center"
            style={{ backgroundImage: `url(${getTMDBImageUrl(hero.backdrop_path || hero.poster_path, 'original')})` }}
          >
            <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-r from-black via-black/70 to-transparent' : 'bg-gradient-to-r from-white via-white/70 to-transparent'}`}></div>
            <div className={`absolute inset-0 ${effectiveTheme === 'dark' ? 'bg-gradient-to-t from-black via-transparent to-transparent' : 'bg-gradient-to-t from-white via-transparent to-transparent'}`}></div>
          </div>


          <div className="relative z-10 h-full flex items-center max-w-7xl mx-auto px-4 md:px-6">
            <div className="max-w-2xl">
              <div className="mb-4">
                <span className="px-4 py-2 bg-blue-600 text-white rounded-full text-sm md:text-base font-bold">Recommended for you</span>
              </div>
              <h1 className={`text-3xl md:text-6xl font-bold mb-4 drop-shadow-2xl ${textClass}`}>{getTitle(hero)}</h1>
              <p className={`text-sm md:text-lg mb-6 line-clamp-3 drop-shadow-lg ${effectiveTheme === 'dark' ? 'text-gray-200' : 'text-gray-700'}`}>{hero.overview}</p>
              <div className="flex flex-wrap gap-2 md:gap-4">
                <button
                  onClick={() => onShowDetail(hero.id, hero.media_type)}
                  className={`px-4 md:px-8 py-2 md:py-3 ${effectiveTheme === 'dark' ? 'bg-white text-black hover:bg-gray-200' : 'bg-black text-white hover:bg-gray-800'} rounded-lg font-bold transition-all flex items-center gap-2 shadow-xl text-sm md:text-base`}
                >
                  <Play size={20} fill="currentColor" />
                  Play
                </button>
                {!isInWatchlist(profile.id, hero.id) && (
                  <button
                    onClick={() => handleAddToWatchlist(hero)}
                    className={`px-4 md:px-8 py-2 md:py-3 ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded-lg font-bold transition-all flex items-center gap-2 shadow-xl text-sm md:text-base`}
                  >
                    <Plus size={20} />
                    My List
                  </button>
                )}
                <button
                  onClick={() => onShowDetail(hero.id, hero.media_type)}
                  className={`px-4 md:px-8 py-2 md:py-3 ${effectiveTheme === 'dark' ? 'bg-gray-600/80 hover:bg-gray-500/80' : 'bg-gray-300 hover:bg-gray-400'} backdrop-blur-sm rounded-lg font-bold transition-all flex items-center gap-2 shadow-xl text-sm md:text-base`}
                >
                  <Info size={20} />
                  More Info
                </button>
              </div>
            </div>
          </div>
        </div>
      )}


      <div className="relative z-10 px-4 md:px-6 pb-20 -mt-20 md:-mt-32">
        <div className="max-w-7xl mx-auto">
          <ContentRow
            title="More recommendations for you"
            items={recommendations.slice(1)}
            onItemClick={(item: any) => onShowDetail(item.id, item.media_type)}
            theme={effectiveTheme}
          />
        </div>
      </div>
    </div>
  );
}


function ContentRow({ title, items, onItemClick, theme }: any) {
  const scrollRef = useRef<HTMLDivElement>(null);


  return (
    <div className="space-y-3">
      <h2 className={`text-xl md:text-2xl font-bold ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>{title}</h2>
      <div
        ref={scrollRef}
        className="flex gap-3 overflow-x-auto scrollbar-hide pb-4 scroll-smooth"
        style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
      >
        {items.map((item: any) => {
          const itemTitle = item.title || item.name;
          const posterPath = item.poster_path;


          return (
            <div key={item.id} className="flex-shrink-0 group relative">
              <button
                onClick={() => onItemClick(item)}
                className="cursor-pointer"
              >
                <div className="w-40 md:w-48 rounded-lg overflow-hidden transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl">
                  {posterPath ? (
                    <img
                      src={getTMDBImageUrl(posterPath, 'w342')}
                      alt={itemTitle}
                      className="w-full h-56 md:h-72 object-cover"
                    />
                  ) : (
                    <div className="w-full h-56 md:h-72 bg-gray-800 flex flex-col items-center justify-center p-4">
                      <div className="relative">
                        <Film size={48} className="text-gray-600 mb-2" />
                        <X size={24} className="text-gray-600 absolute -top-1 -right-1" />
                      </div>
                      <p className="text-gray-500 text-xs text-center mt-2">No thumbnail available</p>
                    </div>
                  )}
                </div>
                {itemTitle && (
                  <div className="mt-2 px-1">
                    <p className={`text-sm font-medium truncate ${theme === 'dark' ? 'text-white' : 'text-gray-900'}`}>
                      {itemTitle}
                    </p>
                  </div>
                )}
              </button>
            </div>
          );
        })}
      </div>
    </div>
  );
}


TermsView.tsx:
import { ArrowLeft, Scale, Shield, FileText, AlertTriangle, Globe, Mail } from 'lucide-react';
import { useTheme } from '../context/ThemeContext';


interface TermsViewProps {
  onBack: () => void;
}


export function TermsView({ onBack }: TermsViewProps) {
  const { effectiveTheme } = useTheme();


  const bgClass = effectiveTheme === 'dark' ? 'bg-black' : 'bg-gray-50';
  const textClass = effectiveTheme === 'dark' ? 'text-white' : 'text-gray-900';
  const cardClass = effectiveTheme === 'dark' ? 'bg-gray-900' : 'bg-white border border-gray-200';


  return (
    <div className={`min-h-screen ${bgClass} ${textClass}`}>
      <div className={`fixed top-0 left-0 right-0 z-50 ${effectiveTheme === 'dark' ? 'bg-gradient-to-b from-black via-black/95 to-transparent' : 'bg-gradient-to-b from-white via-white/95 to-transparent'}`}>
        <div className="max-w-7xl mx-auto px-6 py-4">
          <button
            onClick={onBack}
            className={`flex items-center gap-2 ${textClass} hover:text-blue-400 transition-colors`}
          >
            <ArrowLeft size={24} />
            <span className="font-medium">Back</span>
          </button>
        </div>
      </div>


      <div className="pt-24 px-6 pb-20">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <div className="flex items-center justify-center gap-3 mb-4">
              <Scale size={40} className="text-blue-500" />
              <h1 className={`text-5xl font-bold ${textClass}`}>Terms and Conditions</h1>
            </div>
            <p className={`text-xl ${effectiveTheme === 'dark' ? 'text-gray-400' : 'text-gray-600'}`}>
              Effective Date: October 2025
            </p>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <FileText size={28} className="text-blue-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>1. Introduction</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  Welcome to SimplStream ("we," "us," "our," "the Service"). By accessing or using this website, you agree to comply with and be bound by these Terms and Conditions. If you do not agree, please do not use the Service.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Shield size={28} className="text-green-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>2. Ownership and Scope 🏢</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-4`}>
                  All visual design, branding, features, and website code, including but not limited to the user interface and site experience, are the exclusive property of Andy and SimplStream.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  SimplStream does not host, upload, or control the actual media streams. All movies, TV shows, and videos are streamed from external, third-party servers, including but not limited to:
                </p>
                <ul className={`list-disc list-inside space-y-1 ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} ml-4`}>
                  <li>VidSRC</li>
                  <li>Vidlink Pro</li>
                  <li>111Movies</li>
                  <li>Videasy</li>
                  <li>Vidfast</li>
                  <li>DaddyLive (for Live TV channels)</li>
                  <li>Other independently operated content sources</li>
                </ul>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mt-4`}>
                  We make no claim to ownership, hosting, or control of the content accessed through these servers.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Globe size={28} className="text-purple-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>3. External Content and API Attribution 🌐</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  All media, trailers, posters, and metadata come from unaffiliated outside providers.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  TMDB API data is used under license: <span className="italic">"This product uses the TMDB API but is not endorsed or certified by TMDB."</span>
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  Live TV channels are provided through DaddyLive embed streams. SimplStream does not own, control, or manage these streams.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  All intellectual property, trademarks, and copyright for video content belong to their respective owners.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  We are not responsible for the accuracy, legality, or safety of third-party media, links, or data.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Shield size={28} className="text-blue-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>4. Permitted Usage ✅</h2>
                <ul className={`list-disc list-inside space-y-2 ${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'}`}>
                  <li>SimplStream is free for personal, non-commercial use.</li>
                  <li>Users may not resell, redistribute, record, or use the Service or linked streams for commercial purposes.</li>
                  <li>You must not attempt to bypass, modify, or disrupt features, security, or source attribution.</li>
                  <li>Any misuse, illegal behavior, or copyright violations are strictly prohibited.</li>
                  <li>Profile features including passcode protection, watchlist, watch history, and ad preferences are provided as-is and may be subject to browser storage limitations.</li>
                </ul>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <AlertTriangle size={28} className="text-yellow-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>5. Ads and Third-Party Services 📢</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  SimplStream may display minimal ads to support the free service, including banner ads, countdown ads, fullscreen ads, and popup ads.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  Users have the option to remove all ads by toggling the "Remove Ads" feature in their profile settings. This feature is completely free and requires no payment or subscription.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  Additionally, streaming servers or external providers may display their own ads which are beyond SimplStream's control.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  These third-party providers may utilize cookies, trackers, and advertising platforms.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  For additional privacy protection, we strongly recommend using browser ad/tracker blockers such as AdBlock or Ghostery.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  SimplStream cannot guarantee any minimum level of ad frequency or third-party ad behavior from external sources.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Shield size={28} className="text-indigo-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>6. Data and Privacy 🔒</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  SimplStream itself does not collect, store, share, or sell your personal or usage data.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  All profile data, watch history, and preferences are stored locally in your browser using localStorage. This data never leaves your device.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  However, third-party servers, advertisers, or APIs may collect data per their own privacy policies.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  You are solely responsible for reviewing and accepting the privacy practices of any connected service.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  <strong>Parents and guardians:</strong> This Service is not designed for children under 13 without supervision.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Scale size={28} className="text-red-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>7. Intellectual Property ©</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  All site elements, text, graphics, UI, and original materials are © 2025 Andy/SimplStream.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  External video/server content is NOT claimed or owned by SimplStream.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  Use of third-party branding or trademarks is only for identification and descriptive purposes under fair use laws.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <AlertTriangle size={28} className="text-orange-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>8. Limitation of Liability ⚠️</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  SimplStream disclaims any liability for errors, omissions, interruptions, server downtime, illegal content, or damages resulting from use or inability to use the Service.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  All content is provided as-is and as-available from independent sources.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  You use SimplStream at your own risk.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Globe size={28} className="text-cyan-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>9. Links to Other Websites 🔗</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  The Service may contain links or embeds to other sites not owned or operated by SimplStream.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  We do not control, recommend, or endorse any third-party content or policies. Use and access to these sites are at your own risk.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <FileText size={28} className="text-pink-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>10. Changes and Termination 🔄</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed mb-3`}>
                  These Terms may be amended at any time without prior notice.
                </p>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  SimplStream reserves the right to suspend, restrict, or terminate service to any user who violates these Terms.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 mb-6 shadow-lg`}>
            <div className="flex items-start gap-4 mb-4">
              <Scale size={28} className="text-teal-500 flex-shrink-0" />
              <div>
                <h2 className={`text-2xl font-bold mb-3 ${textClass}`}>11. Governing Law ⚖️</h2>
                <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} leading-relaxed`}>
                  These Terms are governed by the laws of the State of Texas, United States, without regard to conflict of law principles.
                </p>
              </div>
            </div>
          </div>


          <div className={`${cardClass} rounded-lg p-8 shadow-lg text-center`}>
            <div className="flex items-center justify-center gap-3 mb-4">
              <Mail size={28} className="text-blue-500" />
              <h2 className={`text-2xl font-bold ${textClass}`}>12. Contact 📧</h2>
            </div>
            <p className={`${effectiveTheme === 'dark' ? 'text-gray-300' : 'text-gray-700'} mb-4`}>
              For any questions or legal requests, please email:
            </p>
            <a
              href="mailto:admin.simplstream@protonmail.com"
              className="text-blue-500 hover:text-blue-600 text-xl font-semibold"
            >
              admin.simplstream@protonmail.com
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}


src/context/ThemeContext.tsx:
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { getTheme, saveTheme, getEffectiveTheme, Theme } from '../lib/storage';


interface ThemeContextType {
  theme: Theme;
  effectiveTheme: 'light' | 'dark';
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
}


const ThemeContext = createContext<ThemeContextType | undefined>(undefined);


export function ThemeProvider({ children }: { children: ReactNode }) {
  const [theme, setThemeState] = useState<Theme>(getTheme());
  const [effectiveTheme, setEffectiveTheme] = useState<'light' | 'dark'>(getEffectiveTheme());


  useEffect(() => {
    const updateEffectiveTheme = () => {
      const effective = getEffectiveTheme();
      setEffectiveTheme(effective);
      document.documentElement.classList.toggle('dark', effective === 'dark');
    };


    updateEffectiveTheme();


    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        updateEffectiveTheme();
      }
    };


    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, [theme]);


  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
    saveTheme(newTheme);
    const effective = newTheme === 'system'
      ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
      : newTheme;
    setEffectiveTheme(effective);
    document.documentElement.classList.toggle('dark', effective === 'dark');
  };


  const toggleTheme = () => {
    const newTheme = effectiveTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
  };


  return (
    <ThemeContext.Provider value={{ theme, effectiveTheme, setTheme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}


export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
}


src/lib/formatDuration.ts:
export function formatDuration(minutes: number): string {
  if (minutes < 60) {
    return `${minutes} min`;
  }


  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;


  if (mins === 0) {
    return `${hours} hr`;
  }


  return `${hours} hr and ${mins} min`;
}




liveChannels.ts:
import { LiveChannel } from '../types';


export const LIVE_CHANNELS: LiveChannel[] = [
  { name: 'Cartoon Network', embed: 'https://dlhd.dad/stream/stream-339.php', category: 'Kids', channelNumber: 1 },
  { name: 'NICK', embed: 'https://dlhd.dad/stream/stream-330.php', category: 'Kids', channelNumber: 2 },
  { name: 'Nicktoons', embed: 'https://dlhd.dad/stream/stream-649.php', category: 'Kids', channelNumber: 3 },
  { name: 'Disney Channel', embed: 'https://dlhd.dad/stream/stream-312.php', category: 'Kids', channelNumber: 4 },
  { name: 'Disney XD', embed: 'https://dlhd.dad/stream/stream-314.php', category: 'Kids', channelNumber: 5 },
  { name: 'Disney JR', embed: 'https://dlhd.dad/stream/stream-652.php', category: 'Kids', channelNumber: 6 },
  { name: 'Nick JR', embed: 'https://dlhd.dad/stream/stream-329.php', category: 'Kids', channelNumber: 7 },
  { name: 'Sky Sports Premier League', embed: 'https://dlhd.dad/stream/stream-130.php', category: 'Sports', channelNumber: 8 },
  { name: 'Fox Sports 1', embed: 'https://dlhd.dad/stream/stream-39.php', category: 'Sports', channelNumber: 9 },
  { name: 'Fox Sports 2', embed: 'https://dlhd.dad/stream/stream-758.php', category: 'Sports', channelNumber: 10 },
  { name: 'ESPN USA', embed: 'https://dlhd.dad/stream/stream-44.php', category: 'Sports', channelNumber: 11 },
  { name: 'NHL', embed: 'https://dlhd.dad/stream/stream-663.php', category: 'Sports', channelNumber: 12 },
  { name: 'NFL', embed: 'https://dlhd.dad/stream/stream-405.php', category: 'Sports', channelNumber: 13 },
  { name: 'NBA', embed: 'https://dlhd.dad/stream/stream-404.php', category: 'Sports', channelNumber: 14 },
  { name: 'beIN Sports', embed: 'https://dlhd.dad/stream/stream-425.php', category: 'Sports', channelNumber: 15 },
  { name: 'Sky Sports Cricket', embed: 'https://dlhd.dad/stream/stream-65.php', category: 'Sports', channelNumber: 16 },
  { name: 'WWE', embed: 'https://dlhd.dad/stream/stream-376.php', category: 'Sports', channelNumber: 17 },
  { name: 'NBC USA', embed: 'https://dlhd.dad/stream/stream-53.php', category: 'Entertainment', channelNumber: 18 },
  { name: 'FX USA', embed: 'https://dlhd.dad/stream/stream-317.php', category: 'Entertainment', channelNumber: 19 },
  { name: 'Animal Planet', embed: 'https://dlhd.dad/stream/stream-304.php', category: 'Documentary', channelNumber: 20 },
  { name: 'Fox News', embed: 'https://dlhd.dad/stream/stream-347.php', category: 'News', channelNumber: 21 },
  { name: 'CNN', embed: 'https://dlhd.dad/stream/stream-345.php', category: 'News', channelNumber: 22 },
  { name: 'ABC USA', embed: 'https://dlhd.dad/stream/stream-51.php', category: 'News', channelNumber: 23 },
  { name: 'MSNBC', embed: 'https://dlhd.dad/stream/stream-327.php', category: 'News', channelNumber: 24 },
  { name: 'CNBC', embed: 'https://dlhd.dad/stream/stream-309.php', category: 'News', channelNumber: 25 },
  { name: 'History USA', embed: 'https://dlhd.dad/stream/stream-322.php', category: 'Documentary', channelNumber: 26 },
  { name: 'Univision', embed: 'https://dlhd.dad/stream/stream-132.php', category: 'Entertainment', channelNumber: 27 },
  { name: 'HGTV', embed: 'https://dlhd.dad/stream/stream-382.php', category: 'Lifestyle', channelNumber: 28 },
  { name: 'USA Network', embed: 'https://dlhd.dad/stream/stream-343.php', category: 'Entertainment', channelNumber: 29 },
  { name: 'TLC', embed: 'https://dlhd.dad/stream/stream-337.php', category: 'Lifestyle', channelNumber: 30 },
  { name: 'TBS', embed: 'https://dlhd.dad/stream/stream-336.php', category: 'Entertainment', channelNumber: 31 },
  { name: 'CBS', embed: 'https://dlhd.dad/stream/stream-52.php', category: 'Entertainment', channelNumber: 32 },
  { name: 'Telemundo', embed: 'https://dlhd.dad/stream/stream-52.php', category: 'Entertainment', channelNumber: 33 },
  { name: 'Boomerang', embed: 'https://dlhd.dad/stream/stream-648.php', category: 'Kids', channelNumber: 34 }
];


export const CHANNEL_DESCRIPTIONS: Record<string, string> = {
  'Cartoon Network': 'Animated series and movies for kids featuring popular characters and original content.',
  'NICK': 'Nickelodeon - Kids entertainment with animated and live-action shows.',
  'Nicktoons': 'All cartoons, all the time! Classic and new animated series.',
  'Disney Channel': 'Family entertainment with original movies, series, and Disney favorites.',
  'Disney XD': 'Action-packed entertainment for kids with adventure shows and movies.',
  'Disney JR': 'Preschool programming and educational shows for young children.',
  'Nick JR': 'Educational programming for preschoolers.',
  'Sky Sports Premier League': 'Watch live Premier League football matches, highlights, analysis, and exclusive content.',
  'Fox Sports 1': 'Live sports coverage including NFL, MLB, college football, and more.',
  'Fox Sports 2': 'Additional sports programming and live events.',
  'ESPN USA': 'The worldwide leader in sports with live games, highlights, analysis, and sports news coverage.',
  'NHL': 'Official NHL channel featuring live hockey games, highlights, and behind-the-scenes content.',
  'NFL': 'Live NFL games, highlights, analysis, and football programming.',
  'NBA': 'Official NBA channel with live basketball games, highlights, and exclusive content.',
  'beIN Sports': 'International sports channel with soccer, tennis, motorsports, and more.',
  'Sky Sports Cricket': 'Live cricket matches, highlights, and cricket programming from around the world.',
  'WWE': 'Live WWE events, pay-per-views, original shows, and classic wrestling content.',
  'NBC USA': 'NBC network shows, news, sports, and entertainment.',
  'FX USA': 'Original dramas, comedies, and movies.',
  'Animal Planet': 'Wildlife documentaries, animal shows, and nature programming.',
  'Fox News': '24/7 news coverage and political analysis.',
  'CNN': 'Cable News Network with 24/7 news, analysis, and breaking stories.',
  'ABC USA': 'ABC network with news, entertainment, and family programming.',
  'MSNBC': 'News analysis, opinion, and live breaking news coverage.',
  'CNBC': 'Business news, market data, and financial programming.',
  'History USA': 'Historical documentaries, series, and educational programming.',
  'Univision': 'Spanish-language network with telenovelas, news, and entertainment.',
  'HGTV': 'Home and garden programming with renovation, design, and real estate shows.',
  'USA Network': 'Original series, movies, and entertainment programming.',
  'TLC': 'Reality shows and lifestyle programming featuring real-life stories.',
  'TBS': 'Comedy shows, movies, and sports programming.',
  'CBS': 'CBS network programming with news, entertainment, and sports.',
  'Telemundo': 'Spanish-language network with telenovelas, news, and entertainment.',
  'Boomerang': 'Classic cartoons and animated shows for kids.'
};


recommendations.ts:
import { Profile } from '../types';
import { getWatchlist, getWatchHistory, getRatings } from './storage';
import { tmdbFetch } from './tmdb';


export async function generateRecommendations(profile: Profile): Promise<any[]> {
  const watchlist = getWatchlist(profile.id);
  const watchHistory = getWatchHistory(profile.id);
  const ratings = getRatings(profile.id);


  const genreMap = new Map<number, number>();
  const seenIds = new Set<number>();


  watchlist.forEach(item => {
    if (item.tmdb_id) seenIds.add(item.tmdb_id);
  });


  watchHistory.forEach(item => {
    if (item.tmdb_id) seenIds.add(item.tmdb_id);
  });


  ratings.forEach(rating => {
    if (rating.genres && Array.isArray(rating.genres)) {
      rating.genres.forEach((genre: any) => {
        genreMap.set(genre.id, (genreMap.get(genre.id) || 0) + rating.rating);
      });
    }
  });


  const topGenres = Array.from(genreMap.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 3)
    .map(([genreId]) => genreId);


  try {


    const [trendingMovies, trendingShows, popularMovies, popularShows] = await Promise.all([
      tmdbFetch('/trending/movie/week'),
      tmdbFetch('/trending/tv/week'),
      tmdbFetch('/movie/popular'),
      tmdbFetch('/tv/popular')
    ]);


    const allContent = [
      ...(trendingMovies.results || []).map((item: any) => ({ ...item, media_type: 'movie' })),
      ...(trendingShows.results || []).map((item: any) => ({ ...item, media_type: 'tv' })),
      ...(popularMovies.results || []).map((item: any) => ({ ...item, media_type: 'movie' })),
      ...(popularShows.results || []).map((item: any) => ({ ...item, media_type: 'tv' }))
    ];


    const scored = allContent
      .filter(item => !seenIds.has(item.id))
      .map(item => {
        let score = 0;


        if (item.genre_ids && Array.isArray(item.genre_ids)) {
          item.genre_ids.forEach((genreId: number) => {
            if (topGenres.includes(genreId)) {
              score += 10;
            }
          });
        }


        score += (item.vote_average || 0) * 2;
        score += (item.popularity || 0) / 100;


        return { ...item, score };
      })
      .sort((a, b) => b.score - a.score)
      .slice(0, 20);


    return scored;
  } catch (error) {
    console.error('Error generating recommendations:', error);
    return [];
  }
}


storage.ts:
import { Profile, WatchHistory, WatchlistItem } from '../types';


const STORAGE_KEYS = {
  PROFILES: 'simplstream_profiles',
  WATCH_HISTORY: 'simplstream_watch_history',
  WATCHLIST: 'simplstream_watchlist',
  THEME: 'simplstream_theme',
};


export type Theme = 'light' | 'dark' | 'system';


// Profile Management
export function getProfiles(): Profile[] {
  const data = localStorage.getItem(STORAGE_KEYS.PROFILES);
  return data ? JSON.parse(data) : [];
}


export function saveProfile(profile: Profile): void {
  const profiles = getProfiles();
  const index = profiles.findIndex(p => p.id === profile.id);


  if (index >= 0) {
    profiles[index] = profile;
  } else {
    profiles.push(profile);
  }


  localStorage.setItem(STORAGE_KEYS.PROFILES, JSON.stringify(profiles));
}


export function deleteProfile(profileId: string): void {
  const profiles = getProfiles().filter(p => p.id !== profileId);
  localStorage.setItem(STORAGE_KEYS.PROFILES, JSON.stringify(profiles));


  // Also delete related data
  const history = getWatchHistory().filter(h => h.profile_id !== profileId);
  localStorage.setItem(STORAGE_KEYS.WATCH_HISTORY, JSON.stringify(history));


  const watchlist = getWatchlist().filter(w => w.profile_id !== profileId);
  localStorage.setItem(STORAGE_KEYS.WATCHLIST, JSON.stringify(watchlist));
}


export function deleteAllData(): void {
  Object.values(STORAGE_KEYS).forEach(key => {
    localStorage.removeItem(key);
  });
}


// Watch History Management
export function getWatchHistory(profileId?: string): WatchHistory[] {
  const data = localStorage.getItem(STORAGE_KEYS.WATCH_HISTORY);
  const history = data ? JSON.parse(data) : [];
  return profileId ? history.filter((h: WatchHistory) => h.profile_id === profileId) : history;
}


export function saveWatchHistory(history: WatchHistory): void {
  const allHistory = getWatchHistory();
  const index = allHistory.findIndex(h => h.id === history.id);


  if (index >= 0) {
    allHistory[index] = history;
  } else {
    allHistory.push(history);
  }


  localStorage.setItem(STORAGE_KEYS.WATCH_HISTORY, JSON.stringify(allHistory));
}


// Watchlist Management
export function getWatchlist(profileId?: string): WatchlistItem[] {
  const data = localStorage.getItem(STORAGE_KEYS.WATCHLIST);
  const watchlist = data ? JSON.parse(data) : [];
  return profileId ? watchlist.filter((w: WatchlistItem) => w.profile_id === profileId) : watchlist;
}


export function addToWatchlist(item: WatchlistItem): void {
  const watchlist = getWatchlist();
  const exists = watchlist.find(w => w.profile_id === item.profile_id && w.tmdb_id === item.tmdb_id);


  if (!exists) {
    watchlist.push(item);
    localStorage.setItem(STORAGE_KEYS.WATCHLIST, JSON.stringify(watchlist));
  }
}


export function removeFromWatchlist(profileId: string, tmdbId: number): void {
  const watchlist = getWatchlist().filter(w => !(w.profile_id === profileId && w.tmdb_id === tmdbId));
  localStorage.setItem(STORAGE_KEYS.WATCHLIST, JSON.stringify(watchlist));
}


export function isInWatchlist(profileId: string, tmdbId: number): boolean {
  const watchlist = getWatchlist(profileId);
  return watchlist.some(w => w.tmdb_id === tmdbId);
}


// Theme Management
export function getTheme(): Theme {
  const theme = localStorage.getItem(STORAGE_KEYS.THEME);
  return (theme as Theme) || 'system';
}


export function saveTheme(theme: Theme): void {
  localStorage.setItem(STORAGE_KEYS.THEME, theme);
}


export function getEffectiveTheme(): 'light' | 'dark' {
  const theme = getTheme();


  if (theme === 'system') {
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }


  return theme;
}


// Generate unique ID
export function generateId(): string {
  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}


// Rating Management
export function getRatings(profileId?: string): any[] {
  const data = localStorage.getItem('simplstream_ratings');
  const ratings = data ? JSON.parse(data) : [];
  return profileId ? ratings.filter((r: any) => r.profile_id === profileId) : ratings;
}


export function saveRating(rating: any): void {
  const ratings = getRatings();
  const index = ratings.findIndex(r => r.profile_id === rating.profile_id && r.tmdb_id === rating.tmdb_id && r.media_type === rating.media_type);


  if (index >= 0) {
    ratings[index] = rating;
  } else {
    ratings.push(rating);
  }


  localStorage.setItem('simplstream_ratings', JSON.stringify(ratings));
}


export function getRating(profileId: string, tmdbId: number, mediaType: string): any | null {
  const ratings = getRatings(profileId);
  return ratings.find(r => r.tmdb_id === tmdbId && r.media_type === mediaType) || null;
}


// Import/Export profile data
export function exportProfileData(profileId: string): string {
  const profile = getProfiles().find(p => p.id === profileId);
  const watchHistory = getWatchHistory(profileId);
  const watchlist = getWatchlist(profileId);
  const ratings = getRatings(profileId);


  const data = {
    profile,
    watchHistory,
    watchlist,
    ratings,
    exportedAt: new Date().toISOString(),
    version: '1.0'
  };


  return JSON.stringify(data, null, 2);
}


export function importProfileData(jsonData: string): boolean {
  try {
    const data = JSON.parse(jsonData);


    if (!data.profile || !data.version) {
      throw new Error('Invalid data format');
    }


    // Generate new profile ID to avoid conflicts
    const newProfileId = generateId();


    // Save profile with new ID
    const newProfile = { ...data.profile, id: newProfileId };
    saveProfile(newProfile);


    // Import watch history with new profile ID
    if (data.watchHistory && Array.isArray(data.watchHistory)) {
      data.watchHistory.forEach((history: WatchHistory) => {
        saveWatchHistory({ ...history, id: generateId(), profile_id: newProfileId });
      });
    }


    // Import watchlist with new profile ID
    if (data.watchlist && Array.isArray(data.watchlist)) {
      data.watchlist.forEach((item: WatchlistItem) => {
        addToWatchlist({ ...item, id: generateId(), profile_id: newProfileId });
      });
    }


    // Import ratings with new profile ID
    if (data.ratings && Array.isArray(data.ratings)) {
      data.ratings.forEach((rating: any) => {
        saveRating({ ...rating, id: generateId(), profile_id: newProfileId });
      });
    }


    return true;
  } catch (error) {
    console.error('Import failed:', error);
    return false;
  }
}


tmdb.ts:
const TMDB_KEY = '335a2d8a6455213ca6201aba18056860';
const TMDB_BASE = 'https://api.themoviedb.org/3';


export async function tmdbFetch(path: string) {
  const url = `${TMDB_BASE}${path}${path.includes('?') ? '&' : '?'}api_key=${TMDB_KEY}&language=en-US`;
  const res = await fetch(url);
  if (!res.ok) throw new Error('TMDB error ' + res.status);
  return res.json();
}


export function getTMDBImageUrl(path: string | null, size: string = 'w780'): string {
  if (!path) return '/placeholder.svg';
  return `https://image.tmdb.org/t/p/${size}${path}`;
}


export const EMBED_PROVIDERS = {
  vidsrc: (type: string, tmdbId: number, season?: number, episode?: number) => {
    if (type === 'movie') return `https://vidsrc.xyz/embed/movie?tmdb=${tmdbId}`;
    if (type === 'tv') return `https://vidsrc.xyz/embed/tv?tmdb=${tmdbId}&season=${season}&episode=${episode}`;
    return '';
  },
  vidlink: (type: string, tmdbId: number, season?: number, episode?: number) => {
    if (type === 'movie') return `https://vidlink.pro/movie/${tmdbId}`;
    if (type === 'tv') return `https://vidlink.pro/tv/${tmdbId}/${season}/${episode}`;
    return '';
  },
  '111movies': (type: string, tmdbId: number, season?: number, episode?: number) => {
    if (type === 'movie') return `https://111movies.com/movie/${tmdbId}`;
    if (type === 'tv') return `https://111movies.com/tv/${tmdbId}/${season}/${episode}`;
    return '';
  },
  videasy: (type: string, tmdbId: number, season?: number, episode?: number) => {
    if (type === 'movie') return `https://player.videasy.net/movie/${tmdbId}?color=3B82F6`;
    if (type === 'tv') return `https://player.videasy.net/tv/${tmdbId}/${season}/${episode}?color=3B82F6`;
    return '';
  },
  vidfast: (type: string, tmdbId: number, season?: number, episode?: number) => {
    if (type === 'movie') return `https://vidfast.pro/movie/${tmdbId}?theme=2980B9&autoPlay=true`;
    if (type === 'tv') return `https://vidfast.pro/tv/${tmdbId}/${season}/${episode}?theme=2980B9&autoPlay=true&nextButton=true`;
    return '';
  }
};


App.tsx:
import { useState, useEffect } from 'react';
import { Profile } from './types';
import { ProfileSelector } from './components/ProfileSelector';
import { HomeView } from './components/HomeView';
import { DetailView } from './components/DetailView';
import { PlayerView } from './components/PlayerView';
import { LiveTVView } from './components/LiveTVView';
import { AboutView } from './components/AboutView';
import { TermsView } from './components/TermsView';
import { SurpriseMeView } from './components/SurpriseMeView';
import { StartupAnimation } from './components/StartupAnimation';
import { getProfiles } from './lib/storage';


type View =
  | { type: 'profiles' }
  | { type: 'home' }
  | { type: 'livetv' }
  | { type: 'about' }
  | { type: 'terms' }
  | { type: 'surprise' }
  | { type: 'detail'; tmdbId: number; mediaType: 'movie' | 'tv' }
  | { type: 'player'; tmdbId: number; mediaType: 'movie' | 'tv' | 'live'; season?: number; episode?: number; embedUrl?: string; channelName?: string };


function App() {
  const [currentProfile, setCurrentProfile] = useState<Profile | null>(null);
  const [currentView, setCurrentView] = useState<View>({ type: 'profiles' });
  const [previousView, setPreviousView] = useState<View | null>(null);
  const [showStartup, setShowStartup] = useState(() => {
    const hasSeenStartup = sessionStorage.getItem('simplstream_startup_seen');
    return !hasSeenStartup;
  });


  useEffect(() => {
    if (!showStartup) {
      sessionStorage.setItem('simplstream_startup_seen', 'true');
    }
  }, [showStartup]);


  function handleSelectProfile(profile: Profile) {
    setCurrentProfile(profile);
    setCurrentView({ type: 'home' });
  }


  function handleProfileUpdate() {
    if (currentProfile) {
      const profiles = getProfiles();
      const updated = profiles.find(p => p.id === currentProfile.id);
      if (updated) {
        setCurrentProfile(updated);
      }
    }
  }


  function handleLogout() {
    setCurrentProfile(null);
    setCurrentView({ type: 'profiles' });
    setPreviousView(null);
  }


  function handleShowDetail(tmdbId: number, mediaType: 'movie' | 'tv') {
    setPreviousView(currentView);
    setCurrentView({ type: 'detail', tmdbId, mediaType });
  }


  function handleShowLiveTV() {
    setPreviousView(currentView);
    setCurrentView({ type: 'livetv' });
  }


  function handlePlay(tmdbId: number, mediaType: 'movie' | 'tv' | 'live', season?: number, episode?: number, embedUrl?: string, channelName?: string) {
    setPreviousView(currentView);
    setCurrentView({ type: 'player', tmdbId, mediaType, season, episode, embedUrl, channelName });
  }


  function handleShowAbout() {
    setPreviousView(currentView);
    setCurrentView({ type: 'about' });
  }


  function handleShowTerms() {
    setPreviousView(currentView);
    setCurrentView({ type: 'terms' });
  }


  function handleShowSurprise() {
    setPreviousView(currentView);
    setCurrentView({ type: 'surprise' });
  }


  function handleBack() {
    if (previousView) {
      setCurrentView(previousView);
      setPreviousView(null);
    } else if (currentView.type !== 'home') {
      setCurrentView({ type: 'home' });
    }
  }


  if (showStartup) {
    return <StartupAnimation onComplete={() => setShowStartup(false)} />;
  }


  if (currentView.type === 'profiles') {
    return <ProfileSelector onSelectProfile={handleSelectProfile} />;
  }


  if (!currentProfile) {
    return <ProfileSelector onSelectProfile={handleSelectProfile} />;
  }


  if (currentView.type === 'home') {
    return (
      <HomeView
        profile={currentProfile}
        onLogout={handleLogout}
        onShowDetail={handleShowDetail}
        onShowLiveTV={handleShowLiveTV}
        onProfileUpdate={handleProfileUpdate}
        onShowAbout={handleShowAbout}
        onShowTerms={handleShowTerms}
        onShowSurprise={handleShowSurprise}
      />
    );
  }


  if (currentView.type === 'surprise') {
    return (
      <SurpriseMeView
        profile={currentProfile}
        onBack={handleBack}
        onShowDetail={handleShowDetail}
      />
    );
  }


  if (currentView.type === 'about') {
    return <AboutView onBack={handleBack} />;
  }


  if (currentView.type === 'terms') {
    return <TermsView onBack={handleBack} />;
  }


  if (currentView.type === 'livetv') {
    return (
      <LiveTVView
        profile={currentProfile}
        onBack={handleBack}
        onPlay={handlePlay}
      />
    );
  }


  if (currentView.type === 'detail') {
    return (
      <DetailView
        profile={currentProfile}
        tmdbId={currentView.tmdbId}
        mediaType={currentView.mediaType}
        onBack={handleBack}
        onPlay={handlePlay}
      />
    );
  }


  if (currentView.type === 'player') {
    return (
      <PlayerView
        profile={currentProfile}
        tmdbId={currentView.tmdbId}
        mediaType={currentView.mediaType}
        season={currentView.season}
        episode={currentView.episode}
        embedUrl={currentView.embedUrl}
        channelName={currentView.channelName}
        onBack={handleBack}
        onPlay={handlePlay}
      />
    );
  }


  return null;
}


export default App;


Index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;


@layer base {
  * {
    @apply antialiased;
  }


  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  }


  .dark ::-webkit-scrollbar-track {
    @apply bg-gray-900;
  }


  .dark ::-webkit-scrollbar-thumb {
    @apply bg-gray-700 rounded;
  }


  .dark ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-600;
  }


  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }


  ::-webkit-scrollbar-track {
    @apply bg-gray-200;
  }


  ::-webkit-scrollbar-thumb {
    @apply bg-gray-400 rounded;
  }


  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-500;
  }
}


@layer utilities {
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }


  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }


  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }


  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
}


@media (min-width: 1536px) {
  html {
    font-size: 18px;
  }
}


@media (min-width: 1920px) {
  html {
    font-size: 20px;
  }
}


@media (min-width: 2560px) {
  html {
    font-size: 24px;
  }
}


@media (min-width: 3840px) {
  html {
    font-size: 32px;
  }
}


@media (hover: none) and (pointer: coarse) {
  button, a {
    -webkit-tap-highlight-color: transparent;
  }


  * {
    -webkit-touch-callout: none;
  }
}


Main.tsx:
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import { ThemeProvider } from './context/ThemeContext';
import './index.css';


createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ThemeProvider>
      <App />
    </ThemeProvider>
  </StrictMode>
);


types.ts:
export interface Profile {
  id: string;
  name: string;
  avatar_color: string;
  pin?: string | null;
  security_word?: string | null;
  ads_removed?: boolean;
  created_at: string;
}


export interface WatchHistory {
  id: string;
  profile_id: string;
  tmdb_id?: number;
  media_type: 'movie' | 'tv' | 'live';
  title: string;
  poster_path?: string;
  season?: number;
  episode?: number;
  position: number;
  duration: number;
  last_watched: string;
  created_at: string;
}


export interface Rating {
  id: string;
  profile_id: string;
  tmdb_id: number;
  media_type: 'movie' | 'tv';
  rating: number;
  genres: Genre[];
  created_at: string;
  updated_at: string;
}


export interface WatchlistItem {
  id: string;
  profile_id: string;
  tmdb_id?: number;
  media_type: 'movie' | 'tv' | 'live';
  title: string;
  poster_path?: string;
  embed_url?: string;
  created_at: string;
}


export interface Genre {
  id: number;
  name: string;
}


export interface TMDBMovie {
  id: number;
  title: string;
  overview: string;
  poster_path: string | null;
  backdrop_path: string | null;
  release_date: string;
  vote_average: number;
  genre_ids: number[];
  genres?: Genre[];
  popularity: number;
}


export interface TMDBShow {
  id: number;
  name: string;
  overview: string;
  poster_path: string | null;
  backdrop_path: string | null;
  first_air_date: string;
  vote_average: number;
  genre_ids: number[];
  genres?: Genre[];
  popularity: number;
  number_of_seasons?: number;
  number_of_episodes?: number;
}


export interface TMDBDetail extends TMDBMovie, TMDBShow {
  runtime?: number;
  videos?: {
    results: TMDBVideo[];
  };
  credits?: {
    cast: CastMember[];
  };
  external_ids?: {
    imdb_id?: string;
  };
  content_ratings?: {
    results: Array<{ iso_3166_1: string; rating: string }>;
  };
}


export interface TMDBVideo {
  key: string;
  site: string;
  type: string;
  name: string;
}


export interface CastMember {
  id: number;
  name: string;
  character: string;
  profile_path: string | null;
}


export interface Episode {
  id: number;
  episode_number: number;
  name: string;
  overview: string;
  still_path: string | null;
  air_date: string;
  vote_average: number;
}


export interface Season {
  id: number;
  season_number: number;
  name: string;
  episode_count: number;
  episodes?: Episode[];
}


export interface LiveChannel {
  name: string;
  embed: string;
  category: string;
  channelNumber: number;
}


export type ViewType = 'profiles' | 'home' | 'detail' | 'player';


vite-env.d.ts:
/// <reference types="vite/client" />




eslint.config.js:
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';


export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);



Index.html:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SimplStream</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


postcss.config.js:
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


tailwind.config.js:
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      screens: {
        'tv': '1920px',
        '2k': '2560px',
        '4k': '3840px',
        '4xl': '2000px',
      },
    },
  },
  plugins: [],
};

Tsconfig.app.json:
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,


    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",


    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}